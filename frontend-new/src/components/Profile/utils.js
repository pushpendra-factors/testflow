import MomentTz from '../MomentTz';
import {
  operatorMap,
  reverseDateOperatorMap,
  reverseOperatorMap
} from '../../Views/CoreQuery/utils';
import { formatDurationIntoString } from 'Utils/dataFormatter';
import { RevAvailableGroups, ReverseProfileMapper } from 'Utils/constants';

export const granularityOptions = [
  'Timestamp',
  'Hourly',
  'Daily',
  'Weekly',
  'Monthly'
];

export const groups = {
  Timestamp: (item) =>
    MomentTz(item.timestamp * 1000).format('DD MMM YYYY, hh:mm:ss A'),
  Hourly: (item) =>
    `${MomentTz(item.timestamp * 1000)
      .startOf('hour')
      .format('hh A')} - ${MomentTz(item.timestamp * 1000)
      .add(1, 'hour')
      .startOf('hour')
      .format('hh A')} ${MomentTz(item.timestamp * 1000)
      .startOf('hour')
      .format('DD MMM YYYY')}`,
  Daily: (item) =>
    MomentTz(item.timestamp * 1000)
      .startOf('day')
      .format('DD MMM YYYY'),
  Weekly: (item) =>
    `${MomentTz(item.timestamp * 1000)
      .startOf('week')
      .format('DD MMM YYYY')} - ${MomentTz(item.timestamp * 1000)
      .endOf('week')
      .format('DD MMM YYYY')}`,
  Monthly: (item) =>
    MomentTz(item.timestamp * 1000)
      .startOf('month')
      .format('MMM YYYY')
};

export const hoverEvents = [
  '$session',
  '$form_submitted',
  '$offline_touch_point',
  '$sf_campaign_member_created',
  '$sf_campaign_member_updated',
  '$hubspot_form_submission',
  '$hubspot_engagement_email',
  '$hubspot_engagement_meeting_created',
  '$hubspot_engagement_meeting_updated',
  '$hubspot_engagement_call_created',
  '$hubspot_engagement_call_updated'
];

export const TimelineHoverPropDisplayNames = {
  $timestamp: 'Date and Time',
  '$hubspot_form_submission_form-type': 'Form Type',
  $hubspot_form_submission_title: 'Form Title',
  '$hubspot_form_submission_form-id': 'Form ID',
  '$hubspot_form_submission_conversion-id': 'Conversion ID',
  $hubspot_form_submission_email: 'Email',
  '$hubspot_form_submission_page-url-no-qp': 'Page URL',
  '$hubspot_form_submission_page-title': 'Page Title',
  $hubspot_form_submission_timestamp: 'Form Submit Timestamp'
};

export const displayFilterOpts = {
  All: 'All Accounts',
  $hubspot_company: 'Hubspot Companies',
  $salesforce_account: 'Salesforce Accounts'
};

export const formatFiltersForPayload = (filters = []) => {
  const filterProps = [];
  filters.forEach((fil) => {
    if (Array.isArray(fil.values)) {
      fil.values.forEach((val, index) => {
        filterProps.push({
          en: 'user_g',
          lop: !index ? 'AND' : 'OR',
          op: operatorMap[fil.operator],
          pr: fil.props[0],
          ty: fil.props[1],
          va: fil.props[1] === 'datetime' ? val : val
        });
      });
    } else {
      filterProps.push({
        en: 'user_g',
        lop: 'AND',
        op: operatorMap[fil.operator],
        pr: fil.props[0],
        ty: fil.props[1],
        va: fil.props[1] === 'datetime' ? fil.values : fil.values
      });
    }
  });
  return filterProps;
};

export const formatPayloadForFilters = (gp) => {
  const globalFilters = [];

  if (gp && Array.isArray(gp)) {
    let ref = -1;
    let lastProp = '';
    let lastOp = '';
    gp.forEach((pr) => {
      if (pr.lop === 'AND') {
        ref += 1;
        globalFilters.push({
          operator:
            pr.ty === 'datetime'
              ? reverseDateOperatorMap[pr.op]
              : reverseOperatorMap[pr.op],
          props: [pr.pr, pr.ty, pr.en],
          values: [pr.va],
          ref
        });
        lastProp = pr.pr;
        lastOp = pr.op;
      } else if (lastProp === pr.pr && lastOp === pr.op) {
        globalFilters[globalFilters.length - 1].values.push(pr.va);
      } else {
        globalFilters.push({
          operator:
            pr.ty === 'datetime'
              ? reverseDateOperatorMap[pr.op]
              : reverseOperatorMap[pr.op],
          props: [pr.pr, pr.ty, pr.en],
          values: [pr.va],
          ref
        });
        lastProp = pr.pr;
        lastOp = pr.op;
      }
    });
  }
  return globalFilters;
};

export const eventsFormattedForGranularity = (
  events,
  granularity,
  collapse = true
) => {
  const output = events.reduce((result, item) => {
    const byTimestamp = (result[groups[granularity](item)] =
      result[groups[granularity](item)] || {});
    const byUser = (byTimestamp[item.user] = byTimestamp[item.user] || {
      events: [],
      collapsed: collapse
    });
    byUser.events.push(item);
    return result;
  }, {});
  return output;
};

export const toggleCellCollapse = (
  formattedData,
  timestamp,
  username,
  collapseState
) => {
  const data = { ...formattedData };
  data[timestamp][username].collapsed = collapseState;
  return data;
};

const isValidHttpUrl = (string) => {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === 'http:' || url.protocol === 'https:';
};

export const getHost = (urlstr) => {
  const uri = isValidHttpUrl(urlstr) ? new URL(urlstr).hostname : urlstr;
  return uri;
};

export const getUniqueItemsByKeyAndSearchTerm = (activities, searchTerm) =>
  activities?.filter(
    (value, index, self) =>
      index === self.findIndex((t) => t.display_name === value.display_name) &&
      value.display_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

export const propValueFormat = (key, value) => {
  if (
    key.includes('timestamp') ||
    key.includes('starttime') ||
    key.includes('endtime')
  ) {
    return MomentTz(value * 1000).format('DD MMMM YYYY, hh:mm A');
  }
  if (key.includes('_time')) {
    return formatDurationIntoString(parseInt(value));
  }
  if (key.includes('durationmilliseconds')) {
    return formatDurationIntoString(parseInt(value / 1000));
  }
  if (!isNaN(value)) {
    return parseInt(value);
  }
  return value;
};

export const formatSegmentsObjToGroupSelectObj = (group, vals) => {
  const obj = {
    label:
      ReverseProfileMapper[group]?.users ||
      RevAvailableGroups[group] ||
      'Others',
    icon: '',
    values: []
  };
  obj.values = vals?.map((val) => [
    val?.name,
    val?.id,
    {
      name: val?.name,
      description: val?.description,
      type: val?.type,
      query: val?.query
    }
  ]);
  return obj;
};
export const getEventCategory = (event, eventNamesMap) => {
  let category = 'others';
  Object.entries(eventNamesMap).forEach(([groupName, events]) => {
    if (events.includes(event.event_name)) {
      category = groupName;
      return;
    }
  });
  if (event.display_name === 'Page View') {
    category = 'website';
  }
  return category;
};

export const getIconForCategory = (category) => {
  if (category.toLowerCase().includes('hubspot')) {
    return 'hubspot_ads';
  }
  if (category.toLowerCase().includes('salesforce')) {
    return 'salesforce_ads';
  }
  if (category.toLowerCase().includes('leadsquared')) {
    return 'leadSquared';
  }
  if (category.toLowerCase().includes('marketo')) {
    return 'marketo';
  }
  if (category === 'website') {
    return 'globe';
  }
  return 'events_cq';
};

export const convertSVGtoURL = (svg) => {
  // svg needs to be passed with backticks
  const escapeRegExp = (str) => {
    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
  };

  const replaceAll = (str, find, replace) => {
    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
  };

  var encoded = svg.replace(/\s+/g, ' ');
  encoded = replaceAll(encoded, '%', '%25');
  encoded = replaceAll(encoded, '> <', '><');
  encoded = replaceAll(encoded, '; }', ';}');
  encoded = replaceAll(encoded, '<', '%3c');
  encoded = replaceAll(encoded, '>', '%3e');
  encoded = replaceAll(encoded, '"', "'");
  encoded = replaceAll(encoded, '#', '%23');
  encoded = replaceAll(encoded, '{', '%7b');
  encoded = replaceAll(encoded, '}', '%7d');
  encoded = replaceAll(encoded, '|', '%7c');
  encoded = replaceAll(encoded, '^', '%5e');
  encoded = replaceAll(encoded, '`', '%60');
  encoded = replaceAll(encoded, '@', '%40');

  var uri = 'url("data:image/svg+xml;charset=UTF-8,' + encoded + '")';
  return uri;
};

// Made a seperate object for singleview timeline because I needed to fix the viewbox manually. This can be a temporary hack till I find something better.
export const singleTimelineIconSVGs = {
  salesforce_ads: `<svg width="24" height="24" viewBox="-1 -2 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
  <mask id="mask0_1537_401" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="1" y="4" width="23" height="17">
  <path d="M1 4H23.9619V20.0706H1V4Z" fill="white"/>
  </mask>
  <g mask="url(#mask0_1537_401)">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M10.5526 5.7533C11.2932 4.98167 12.3245 4.50286 13.465 4.50286C14.981 4.50286 16.3038 5.34824 17.0081 6.60341C17.6381 6.32186 18.3207 6.17675 19.0108 6.17759C21.7453 6.17759 23.9621 8.41375 23.9621 11.1723C23.9621 13.9309 21.7453 16.1672 19.0108 16.1672C18.6769 16.1672 18.3508 16.1336 18.0354 16.07C17.4152 17.1762 16.233 17.9238 14.8764 17.9238C14.3277 17.9245 13.786 17.7999 13.2929 17.5593C12.6642 19.0385 11.1989 20.0756 9.49166 20.0756C7.71338 20.0756 6.1978 18.9506 5.61646 17.3727C5.35736 17.4274 5.09327 17.4549 4.82846 17.4548C2.71129 17.4548 0.995117 15.7206 0.995117 13.5815C0.995117 12.1478 1.76607 10.8961 2.91196 10.2265C2.66918 9.66742 2.54425 9.06433 2.54496 8.45485C2.54496 5.99456 4.54214 4 7.00572 4C8.4521 4 9.73756 4.68758 10.5526 5.7533Z" fill="#00A1E0"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M4.32163 12.3366C4.3072 12.3743 4.32677 12.3821 4.33141 12.3888C4.37454 12.42 4.41833 12.4426 4.46255 12.468C4.69672 12.592 4.91807 12.6284 5.14929 12.6284C5.62042 12.6284 5.91307 12.3779 5.91307 11.9745V11.9666C5.91307 11.5936 5.5827 11.4581 5.27308 11.3603L5.23266 11.3472C4.99916 11.2714 4.79765 11.2059 4.79765 11.052V11.0442C4.79765 10.9125 4.91545 10.8157 5.09798 10.8157C5.30093 10.8157 5.54143 10.8831 5.69654 10.9687C5.69654 10.9687 5.74227 10.9983 5.7589 10.9541C5.76793 10.9303 5.84632 10.7191 5.85468 10.6963C5.86362 10.6715 5.84792 10.6529 5.83181 10.6433C5.65468 10.5353 5.41004 10.4619 5.1568 10.4619L5.1098 10.4621C4.67858 10.4621 4.37749 10.7228 4.37749 11.096V11.104C4.37749 11.4973 4.70963 11.6251 5.02077 11.714L5.07072 11.7295C5.2973 11.799 5.49299 11.8591 5.49299 12.0185V12.0264C5.49299 12.1724 5.36582 12.2809 5.16102 12.2809C5.08161 12.2809 4.82811 12.2795 4.55419 12.1063C4.52103 12.0869 4.50213 12.073 4.47656 12.0574C4.46306 12.0492 4.4293 12.0345 4.41462 12.0787L4.32163 12.3366ZM11.2185 12.3366C11.2041 12.3743 11.2237 12.3821 11.2285 12.3888C11.2714 12.42 11.3153 12.4426 11.3595 12.468C11.5937 12.592 11.8151 12.6284 12.0462 12.6284C12.5173 12.6284 12.8101 12.3779 12.8101 11.9745V11.9666C12.8101 11.5936 12.4798 11.4581 12.1701 11.3603L12.1297 11.3472C11.8962 11.2714 11.6946 11.2059 11.6946 11.052V11.0442C11.6946 10.9125 11.8124 10.8157 11.9951 10.8157C12.1979 10.8157 12.4383 10.8831 12.5934 10.9687C12.5934 10.9687 12.6392 10.9983 12.6559 10.9541C12.6648 10.9303 12.7433 10.7191 12.7516 10.6963C12.7606 10.6715 12.7448 10.6529 12.7288 10.6433C12.5516 10.5353 12.307 10.4619 12.0538 10.4619L12.0067 10.4621C11.5756 10.4621 11.2745 10.7228 11.2745 11.096V11.104C11.2745 11.4973 11.6065 11.6251 11.9178 11.714L11.9676 11.7295C12.1943 11.799 12.39 11.8591 12.39 12.0185V12.0264C12.39 12.1724 12.2627 12.2809 12.0581 12.2809C11.9785 12.2809 11.725 12.2795 11.4512 12.1063C11.418 12.0869 11.3986 12.0736 11.3735 12.0574C11.3649 12.052 11.3252 12.0365 11.3116 12.0787L11.2185 12.3366ZM15.9269 11.5465C15.9269 11.7743 15.8844 11.9542 15.8008 12.081C15.7178 12.2068 15.5925 12.268 15.4177 12.268C15.2429 12.268 15.1183 12.2069 15.0366 12.0812C14.9542 11.9543 14.9123 11.7743 14.9123 11.5465C14.9123 11.3188 14.9542 11.1395 15.0366 11.0139C15.1183 10.8894 15.2429 10.829 15.4177 10.829C15.5925 10.829 15.7178 10.8895 15.8008 11.014C15.8845 11.1395 15.9269 11.3188 15.9269 11.5465ZM16.3203 11.1239C16.2816 10.9932 16.2214 10.8782 16.1413 10.7822C16.0611 10.686 15.9595 10.6087 15.8392 10.5526C15.719 10.4965 15.5773 10.4681 15.4177 10.4681C15.2581 10.4681 15.1163 10.4965 14.996 10.5526C14.8758 10.6087 14.7742 10.686 14.694 10.7824C14.614 10.8785 14.5537 10.9934 14.5151 11.1239C14.4767 11.2536 14.4572 11.3958 14.4572 11.5465C14.4572 11.6972 14.4767 11.8394 14.5151 11.969C14.5537 12.0994 14.6138 12.2144 14.6941 12.3107C14.7743 12.407 14.8762 12.4837 14.9962 12.5384C15.1165 12.5931 15.2583 12.6209 15.4177 12.6209C15.5772 12.6209 15.7188 12.5931 15.839 12.5384C15.9592 12.4837 16.0609 12.407 16.1413 12.3107C16.2214 12.2147 16.2816 12.0996 16.3203 11.969C16.3586 11.8392 16.3781 11.697 16.3781 11.5465C16.3781 11.396 16.3586 11.2537 16.3203 11.1239ZM19.5495 12.2069C19.5366 12.1687 19.4993 12.1831 19.4993 12.1831C19.4422 12.205 19.3814 12.2253 19.3164 12.2354C19.251 12.2457 19.1785 12.2508 19.1009 12.2508C18.9108 12.2508 18.7593 12.1942 18.6512 12.0823C18.5426 11.9703 18.4816 11.7894 18.4823 11.5447C18.4829 11.3222 18.5367 11.1546 18.6332 11.0269C18.7289 10.9 18.8751 10.8348 19.0694 10.8348C19.2317 10.8348 19.3555 10.8536 19.4852 10.8943C19.4852 10.8943 19.516 10.9077 19.5308 10.8671C19.5653 10.7715 19.5908 10.7035 19.6276 10.5985C19.638 10.5685 19.6124 10.5558 19.603 10.5522C19.552 10.5323 19.4316 10.4996 19.3407 10.4859C19.2558 10.4729 19.1564 10.4661 19.0456 10.4661C18.8805 10.4661 18.7332 10.4944 18.6073 10.5504C18.4817 10.6064 18.3751 10.6837 18.2906 10.7798C18.2062 10.8761 18.1419 10.9911 18.0993 11.1216C18.0567 11.2514 18.0352 11.3938 18.0352 11.5448C18.0352 11.871 18.1232 12.1345 18.2968 12.3276C18.471 12.5214 18.7322 12.6198 19.0732 12.6198C19.2747 12.6198 19.4813 12.579 19.6302 12.5204C19.6302 12.5204 19.6585 12.5068 19.6462 12.4737L19.5495 12.2069ZM20.2376 11.328C20.2564 11.2013 20.2911 11.0961 20.3452 11.0139C20.4268 10.8894 20.551 10.8208 20.7258 10.8208C20.9006 10.8208 21.0158 10.8895 21.0988 11.014C21.1537 11.0962 21.1777 11.2059 21.187 11.3281L20.2376 11.328ZM21.5615 11.0498C21.528 10.9237 21.4455 10.7963 21.3912 10.7381C21.3056 10.6458 21.2217 10.5812 21.1384 10.5455C21.0179 10.4942 20.8882 10.4679 20.7573 10.4681C20.5911 10.4681 20.4401 10.4962 20.3177 10.5536C20.1951 10.6111 20.092 10.6898 20.0113 10.7875C19.9303 10.8851 19.8697 11.0013 19.8309 11.1331C19.7921 11.2642 19.7725 11.407 19.7725 11.5579C19.7725 11.7113 19.7929 11.8544 19.8329 11.983C19.8733 12.1127 19.9382 12.2265 20.0258 12.3213C20.1133 12.4164 20.226 12.491 20.3606 12.543C20.4945 12.5949 20.6572 12.6218 20.8438 12.6212C21.2284 12.6199 21.4307 12.5342 21.5142 12.488C21.529 12.4798 21.5429 12.4655 21.5255 12.4244L21.4384 12.1807C21.4251 12.1443 21.3883 12.1575 21.3883 12.1575C21.2929 12.1931 21.1578 12.2566 20.8418 12.256C20.6354 12.2556 20.4825 12.1946 20.3864 12.0994C20.2881 12.0019 20.2398 11.8588 20.2316 11.6566L21.5626 11.6576C21.5626 11.6576 21.5977 11.6572 21.6013 11.623C21.6027 11.6088 21.6469 11.3496 21.5615 11.0498ZM9.57629 11.328C9.59511 11.2013 9.62988 11.0961 9.68388 11.0139C9.76557 10.8894 9.88962 10.8208 10.0646 10.8208C10.2394 10.8208 10.3546 10.8895 10.4376 11.014C10.4924 11.0962 10.5164 11.2059 10.5257 11.3281L9.57629 11.328ZM10.9002 11.0498C10.8668 10.9237 10.7842 10.7963 10.73 10.7381C10.6444 10.6458 10.5606 10.5812 10.4772 10.5455C10.3567 10.4943 10.227 10.4679 10.096 10.4681C9.92987 10.4681 9.7789 10.4962 9.65646 10.5536C9.53384 10.6111 9.43081 10.6898 9.34988 10.7875C9.26912 10.8851 9.20845 11.0013 9.16955 11.1331C9.13081 11.2642 9.11132 11.407 9.11132 11.5579C9.11132 11.7113 9.13149 11.8544 9.17174 11.983C9.21208 12.1127 9.27706 12.2265 9.36448 12.3213C9.45207 12.4164 9.56465 12.491 9.69924 12.543C9.83325 12.5949 9.99578 12.6218 10.1825 12.6212C10.5671 12.6199 10.7694 12.5342 10.853 12.488C10.8677 12.4798 10.8817 12.4655 10.8642 12.4244L10.7772 12.1807C10.7638 12.1443 10.727 12.1575 10.727 12.1575C10.6316 12.1931 10.4965 12.2566 10.1805 12.256C9.97417 12.2556 9.82118 12.1946 9.72506 12.0994C9.62684 12.0019 9.57848 11.8588 9.5703 11.6566L10.9013 11.6576C10.9013 11.6576 10.9364 11.6572 10.9401 11.623C10.9415 11.6088 10.9857 11.3496 10.9002 11.0498ZM6.69896 12.1997C6.64673 12.158 6.63947 12.1478 6.62217 12.1207C6.59576 12.0799 6.58226 12.0219 6.58226 11.9475C6.58226 11.8307 6.62107 11.7464 6.70107 11.6899C6.70023 11.6901 6.81584 11.5902 7.08714 11.5937C7.20817 11.5959 7.32892 11.6061 7.44857 11.6245V12.2296H7.44874C7.44874 12.2296 7.27954 12.2659 7.08908 12.2774C6.81837 12.2937 6.69812 12.1994 6.69896 12.1997ZM7.22866 11.2642C7.17465 11.2602 7.10469 11.2583 7.02081 11.2583C6.90681 11.2583 6.79651 11.2724 6.69297 11.3003C6.58901 11.3283 6.49551 11.3717 6.41509 11.4292C6.33472 11.4866 6.26863 11.5617 6.22193 11.6487C6.17475 11.7366 6.1507 11.8398 6.1507 11.9555C6.1507 12.0735 6.17121 12.1758 6.21172 12.2593C6.25134 12.3422 6.31101 12.4138 6.3853 12.4678C6.45931 12.5216 6.55061 12.5611 6.65652 12.5852C6.76107 12.6091 6.87955 12.6212 7.009 12.6212C7.14571 12.6212 7.28165 12.6097 7.41338 12.5875C7.52558 12.5682 7.63737 12.5465 7.74865 12.5224C7.79303 12.5122 7.84198 12.4988 7.84198 12.4988C7.87489 12.4904 7.87236 12.4552 7.87236 12.4552L7.8716 11.2378C7.8716 10.9708 7.80038 10.773 7.66004 10.6502C7.52038 10.5279 7.31473 10.4661 7.04866 10.4661C6.94875 10.4661 6.78824 10.4796 6.69187 10.499C6.69187 10.499 6.40125 10.5553 6.28159 10.6491C6.28159 10.6491 6.25526 10.6653 6.2696 10.702L6.36386 10.9552C6.37559 10.988 6.40758 10.9768 6.40758 10.9768C6.40758 10.9768 6.41762 10.9728 6.42943 10.9658C6.68546 10.8265 7.00942 10.8307 7.00942 10.8307C7.15322 10.8307 7.26401 10.8598 7.33844 10.9168C7.4111 10.9725 7.44798 11.0565 7.44798 11.234V11.2903C7.3338 11.2737 7.22866 11.2642 7.22866 11.2642ZM17.9656 10.5784C17.9675 10.5739 17.9685 10.5691 17.9685 10.5643C17.9686 10.5594 17.9676 10.5546 17.9657 10.5502C17.9639 10.5457 17.9611 10.5416 17.9577 10.5382C17.9542 10.5349 17.9501 10.5322 17.9456 10.5304C17.9229 10.5218 17.8097 10.4979 17.7225 10.4925C17.5551 10.4821 17.4624 10.5103 17.3792 10.5477C17.2966 10.5849 17.2053 10.6451 17.1543 10.7137L17.1541 10.5514C17.1541 10.5291 17.1383 10.5111 17.1159 10.5111H16.7746C16.7525 10.5111 16.7365 10.5291 16.7365 10.5514V12.5371C16.7365 12.5479 16.7408 12.5581 16.7484 12.5657C16.7559 12.5733 16.7662 12.5775 16.7769 12.5776H17.1267C17.1374 12.5775 17.1477 12.5733 17.1552 12.5657C17.1628 12.5581 17.167 12.5479 17.167 12.5371V11.5452C17.167 11.4119 17.1817 11.2792 17.211 11.1957C17.2399 11.1131 17.2791 11.0473 17.3277 11C17.3738 10.9543 17.4301 10.9203 17.4921 10.9011C17.5501 10.8844 17.6102 10.8759 17.6706 10.8759C17.7403 10.8759 17.8169 10.8938 17.8169 10.8938C17.8425 10.8967 17.8568 10.881 17.8655 10.8579C17.8884 10.797 17.9532 10.6147 17.9656 10.5784Z" fill="#FFFFFE"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M14.6821 9.65808C14.6389 9.64503 14.595 9.63461 14.5505 9.62686C14.4907 9.61688 14.4302 9.6122 14.3696 9.61285C14.1288 9.61285 13.9391 9.68087 13.8058 9.81521C13.6735 9.94854 13.5835 10.1517 13.5383 10.4189L13.522 10.5091H13.2198C13.2198 10.5091 13.183 10.5076 13.1752 10.5479L13.1256 10.8246C13.1221 10.8511 13.1335 10.8677 13.1689 10.8675H13.4631L13.1646 12.5336C13.1413 12.6677 13.1145 12.7781 13.0849 12.8617C13.0557 12.9443 13.0272 13.0061 12.9921 13.051C12.9581 13.0945 12.9258 13.1265 12.8702 13.1451C12.8243 13.1605 12.7715 13.1676 12.7136 13.1676C12.6814 13.1676 12.6385 13.1622 12.6068 13.1559C12.5752 13.1497 12.5587 13.1426 12.535 13.1326C12.535 13.1326 12.5005 13.1195 12.4869 13.1541C12.4759 13.1823 12.3975 13.3979 12.3882 13.4246C12.3787 13.4509 12.392 13.4717 12.4087 13.4777C12.4479 13.4917 12.477 13.5006 12.5303 13.5132C12.6044 13.5307 12.6668 13.5318 12.7253 13.5318C12.8479 13.5318 12.9595 13.5145 13.0521 13.4811C13.1452 13.4475 13.2263 13.3888 13.2981 13.3094C13.3756 13.2238 13.4244 13.1341 13.471 13.0117C13.5172 12.8904 13.5565 12.7399 13.588 12.5644L13.8879 10.8675H14.3264C14.3264 10.8675 14.3634 10.8689 14.371 10.8288L14.4206 10.552C14.4241 10.5255 14.4128 10.509 14.3772 10.5091H13.9516C13.9537 10.4995 13.9731 10.3498 14.0219 10.2089C14.0428 10.1487 14.082 10.1002 14.1153 10.0669C14.1463 10.0351 14.1845 10.0113 14.2267 9.99749C14.273 9.98319 14.3212 9.97624 14.3696 9.9769C14.4097 9.9769 14.449 9.98171 14.479 9.98795C14.5202 9.99673 14.5363 10.0014 14.5471 10.0046C14.5904 10.0178 14.5963 10.005 14.6048 9.98399L14.7066 9.7045C14.717 9.67446 14.6915 9.6618 14.6821 9.65808ZM8.73502 12.5371C8.73502 12.5594 8.71916 12.5775 8.69688 12.5775H8.34389C8.32153 12.5775 8.30566 12.5594 8.30566 12.5371V9.69597C8.30566 9.67378 8.32153 9.65581 8.34389 9.65581H8.69688C8.71916 9.65581 8.73502 9.67378 8.73502 9.69597V12.5371Z" fill="#FFFFFE"/>
  </g>
  </svg>
  `,
  hubspot_ads: `<svg width="20" height="20" viewBox="-2 -2 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M16.5291 16.4122C14.9799 16.4122 13.724 15.2138 13.724 13.7357C13.724 12.2574 14.9799 11.0589 16.5291 11.0589C18.0783 11.0589 19.3341 12.2574 19.3341 13.7357C19.3341 15.2138 18.0783 16.4122 16.5291 16.4122ZM17.3688 8.58251V6.20136C18.0201 5.9078 18.4763 5.27906 18.4763 4.54938V4.49441C18.4763 3.48735 17.6129 2.66341 16.5576 2.66341H16.5003C15.4449 2.66341 14.5815 3.48735 14.5815 4.49441V4.54938C14.5815 5.27906 15.0377 5.90805 15.6891 6.20162V8.58251C14.7193 8.72557 13.8333 9.10723 13.1026 9.66894L6.25144 4.58328C6.29665 4.41762 6.32841 4.24708 6.32868 4.06781C6.32976 2.92744 5.36245 2.00154 4.1669 2C2.97189 1.99872 2.00135 2.92205 2 4.06267C1.99866 5.20329 2.96597 6.12919 4.16152 6.13047C4.55097 6.13099 4.91163 6.02543 5.2276 5.85386L11.9668 10.8568C11.3937 11.6823 11.0579 12.6711 11.0579 13.7357C11.0579 14.8501 11.4269 15.8811 12.0502 16.7289L10.0009 18.6847C9.83889 18.6382 9.67094 18.6059 9.49277 18.6059C8.51065 18.6059 7.71425 19.3656 7.71425 20.3028C7.71425 21.2403 8.51065 22 9.49277 22C10.4752 22 11.2713 21.2403 11.2713 20.3028C11.2713 20.1333 11.2374 19.9728 11.1887 19.8182L13.2159 17.8837C14.1361 18.5537 15.2821 18.9565 16.5291 18.9565C19.5508 18.9565 22 16.619 22 13.7357C22 11.1255 19.9906 8.96905 17.3688 8.58251Z" fill="#FF7A59"/>
  </svg>
  `,
  leadSquared: `<svg width="20" height="20" viewBox="-3 -3 50 50" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="6" y="6.77518" width="36.5474" height="36.4496" rx="1" fill="#329AFB"></rect><rect x="6" y="25" width="18.2737" height="18.2248" rx="0.5" fill="white"></rect><path d="M6.4 43.2248H23.3062C23.6628 43.2248 23.8411 42.7934 23.5886 42.5416L6.68246 25.6806C6.43032 25.4292 6 25.6078 6 25.9639V42.8248C6 43.0457 6.17909 43.2248 6.4 43.2248Z" fill="#09283D"></path></svg>`,
  marketo: `<svg width="20" height="20" viewBox="-2 -2 50 50" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M41.1165 11.414L31.4995 6.18604V43.814L41.1165 36.154V11.414ZM27.0185 11.75V35.596L19.2745 38.979V9.46004L27.0185 11.75ZM8.91154 13.37L8.88354 34.73L14.8105 33.164V14.32L8.91154 13.37Z" fill="#5C4C9F"></path></svg>`,
  globe: `<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" clip-rule="evenodd" d="M18.7732 16.7878C17.3975 18.4448 15.322 19.5 13 19.5C8.85786 19.5 5.5 16.1421 5.5 12C5.5 11.312 5.59265 10.6456 5.76614 10.0126L8.04209 11.2108L10.0025 9.86292L13.0003 10.3731L11.6519 6.79408L10.0025 6.79408L9.05041 5.623C10.1974 4.91108 11.5507 4.5 13 4.5C14.6185 4.5 16.1173 5.01268 17.3428 5.8845L14.4833 8.34023L16.9424 10.6701L14.4833 11.8407L15.9536 13.381L18.4041 12.8209L18.7732 16.7878ZM23 12C23 17.5228 18.5228 22 13 22C7.47715 22 3 17.5228 3 12C3 6.47715 7.47715 2 13 2C18.5228 2 23 6.47715 23 12ZM9.4304 15.4646L7.34814 14.6612V13.0853L9.07713 10.8702L10.5 12.6437L11.704 13.0853L13.0227 14.6612L11.704 16.6083V18.8105L10.6649 18.4089L9.4304 15.4646Z" fill="#8692A3"/>
  </svg>
  `,
  events_cq: `<svg width="20" height="20" viewBox="-4 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M41.5407 25.6651C42.4479 25.6651 43.2417 24.9847 43.2417 24.0775C43.2417 23.1703 42.4479 22.3765 41.5407 22.3765H35.7574C34.8502 22.3765 34.0564 23.1703 34.0564 24.0775C34.0564 24.8713 34.8502 25.6651 35.7574 25.6651H41.5407Z" fill="#1E89FF"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M26.4589 19.4282L8.99554 24.9847C7.63476 25.4383 7.40796 27.3661 8.54194 28.0464L13.6449 31.2216L5.48019 39.4997C4.57301 40.4068 4.57301 41.7676 5.48019 42.5614C6.27398 43.3552 7.63476 43.4686 8.54194 42.5614L16.7066 34.2833L19.8818 39.3863C20.6755 40.6336 22.4899 40.4068 22.9435 39.0461L28.6134 21.5828C28.9536 20.222 27.7062 18.9746 26.4589 19.4282Z" fill="#1E89FF"></path><path d="M37.572 12.7377C38.2524 12.0573 38.2524 11.0367 37.572 10.4698C36.8916 9.78937 35.871 9.78937 35.304 10.4698L31.1083 14.5521C30.5413 15.2325 30.5413 16.2531 31.1083 16.8201C31.7887 17.5004 32.8092 17.5004 33.3762 16.8201L37.572 12.7377Z" fill="#1E89FF"></path><path d="M25.5518 6.38756C25.5518 5.48038 24.8715 4.79999 23.9643 4.79999C23.0571 4.79999 22.3767 5.48038 22.3767 6.38756V12.2843C22.3767 13.1915 23.0571 13.8718 23.9643 13.8718C24.8715 13.8718 25.5518 13.1915 25.5518 12.2843V6.38756Z" fill="#1E89FF"></path></svg>
  `
};

export const DEFAULT_TIMELINE_CONFIG = {
  disabled_events: [],
  user_config: {
    table_props: [],
    leftpane_props: [],
    milestones: []
  },
  account_config: {
    table_props: [],
    leftpane_props: [],
    milestones: [],
    user_prop: ''
  }
};
