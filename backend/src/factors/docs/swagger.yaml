basePath: /projects
definitions:
  handler.API_FilterRequestPayload:
    properties:
      expr:
        type: string
      name:
        type: string
    type: object
  handler.API_FilterResponePayload:
    properties:
      deleted:
        type: boolean
      expr:
        type: string
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
    type: object
  handler.AttributionRequestPayload:
    properties:
      query:
        type: string
    type: object
  handler.DashboardRequestPayload:
    properties:
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  handler.DashboardUnitWebAnalyticsCustomGroupQuery:
    properties:
      gbp:
        items:
          type: string
        type: array
      metrics:
        items:
          type: string
        type: array
      unit_id:
        type: integer
    type: object
  handler.DashboardUnitWebAnalyticsQueryName:
    properties:
      query_name:
        type: string
      unit_id:
        type: integer
    type: object
  handler.DashboardUnitsWebAnalyticsQuery:
    properties:
      custom_group_units:
        description: CustomGroupUnits - Customize query with group by properties and metrics.
        items:
          $ref: '#/definitions/handler.DashboardUnitWebAnalyticsCustomGroupQuery'
        type: array
      from:
        type: integer
      to:
        type: integer
      units:
        description: Units - Supports redundant metric keys with different unit_ids.
        items:
          $ref: '#/definitions/handler.DashboardUnitWebAnalyticsQueryName'
        type: array
    type: object
  handler.QueryGroup:
    properties:
      query_group:
        type: string
    type: object
  handler.QueryRequestPayload:
    properties:
      query:
        type: string
    type: object
  handler.SavedQueryRequestPayload:
    properties:
      query:
        type: string
      title:
        type: string
    type: object
  handler.SavedQueryUpdatePayload:
    properties:
      title:
        type: string
    type: object
  handler.agentInviteParams:
    properties:
      email:
        type: string
      role:
        type: integer
    required:
    - email
    type: object
  handler.removeProjectAgentParams:
    properties:
      agent_uuid:
        type: string
    required:
    - agent_uuid
    type: object
  handler.updateProjectAgentParams:
    properties:
      agent_uuid:
        type: string
      role:
        type: integer
    required:
    - agent_uuid
    type: object
  model.ChannelQuery:
    properties:
      breakdown:
        type: string
      channel:
        type: string
      filter_key:
        type: string
      filter_value:
        type: string
      from:
        description: unix timestamp
        type: integer
      match_type:
        description: optional
        type: string
      status:
        type: string
      to:
        description: unix timestamp
        type: integer
    type: object
  model.Dashboard:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        description: Composite primary key, id + project_id + agent_id.
        type: integer
      name:
        type: string
      project_id:
        description: Foreign key dashboards(project_id) ref projects(id).
        type: integer
      type:
        type: string
      units_position:
        description: map[string]map[uint64]int -> map[unit_type]unit_id:unit_position
        type: string
      updated_at:
        type: string
    type: object
  model.DashboardUnit:
    properties:
      created_at:
        type: string
      dashboard_id:
        type: integer
      description:
        type: string
      id:
        description: Composite primary key, id + project_id.
        type: integer
      presentation:
        type: string
      project_id:
        description: Foreign key dashboard_units(project_id) ref projects(id).
        type: integer
      query:
        description: TODO (Anil) remove this field once we move to saved queries
        type: string
      query_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.DashboardUnitRequestPayload:
    properties:
      description:
        type: string
      presentation:
        type: string
      query:
        type: string
      query_id:
        type: integer
      title:
        type: string
    type: object
  model.ProjectSetting:
    properties:
      archive_enabled:
        description: Archival related fields.
        type: boolean
      auto_form_capture:
        type: boolean
      auto_track:
        description: |-
          Using pointers to avoid update by default value.
          omit empty to avoid nil(filelds not updated) on resp json.
        type: boolean
      bigquery_enabled:
        type: boolean
      created_at:
        type: string
      exclude_bot:
        type: boolean
      int_adwords_customer_account_id:
        type: string
      int_adwords_enabled_agent_uuid:
        description: |-
          Adwords integration settings.
          Foreign key constraint int_adwords_enabled_agent_uuid -> agents(uuid)
          Todo: Set int_adwords_enabled_agent_uuid, int_adwords_customer_account_id to NULL
          for disabling adwords integration for the project.
        type: string
      int_facebook_access_token:
        type: string
      int_facebook_ad_account:
        type: string
      int_facebook_agent_uuid:
        type: string
      int_facebook_email:
        description: Facebook settings
        type: string
      int_facebook_user_id:
        type: string
      int_hubspot:
        description: Hubspot integration settings.
        type: boolean
      int_hubspot_api_key:
        type: string
      int_salesforce_enabled_agent_uuid:
        description: Salesforce settings
        type: string
      int_segment:
        description: Segment integration settings.
        type: boolean
      updated_at:
        type: string
    type: object
  model.Queries:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        description: Composite primary key, id + project_id.
        type: integer
      is_deleted:
        type: boolean
      project_id:
        description: Foreign key queries(project_id) ref projects(id).
        type: integer
      query:
        type: string
      title:
        type: string
      type:
        type: integer
      updated_at:
        type: string
    type: object
  model.UpdatableDashboard:
    properties:
      description:
        type: string
      name:
        type: string
      units_position:
        type: object
    type: object
  model.User:
    properties:
      ampuserId:
        type: string
      c_uid:
        description: |-
          UserId provided by the customer.
          An unique index is creatd on ProjectId+UserId.
        type: string
      created_at:
        type: string
      id:
        description: Composite primary key with project_id and random uuid.
        type: string
      join_timestamp:
        description: unix epoch timestamp in seconds.
        type: integer
      project_id:
        description: |-
          Below are the foreign key constraints added in creation script.
          project_id -> projects(id)
        type: integer
      properties:
        description: Not part of table, but part of json. Stored in UserProperties table.
        type: string
      properties_id:
        type: string
      seg_aid:
        type: string
      updated_at:
        type: string
    type: object
  pattern_service_wrapper.FactorGraphResults:
    properties:
      charts:
        items:
          $ref: '#/definitions/pattern_service_wrapper.graphResult'
        type: array
    type: object
  pattern_service_wrapper.graphResult:
    properties:
      datasets:
        items:
          type: '&{%!s(token.Pos=1941) string %!s(*ast.InterfaceType=&{1952 0xc002354000 false})}'
        type: array
      explanations:
        items:
          type: string
        type: array
      header:
        type: string
      labels:
        items:
          type: string
        type: array
      type:
        type: string
      x_label:
        type: string
      y_label:
        type: string
    type: object
host: factors-dev.com:8080
info:
  contact: {}
  description: Factors usage doc for golang api server.
  license: {}
  title: Factors Backend Api
  version: "1.0"
paths:
  /{project_id}/agents:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"agents": agentInfoMap, "project_agent_mappings": projectAgentMappings}'
          schema:
            type: string
      summary: Gets agents list for the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/invite:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Invite
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/handler.agentInviteParams'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: '{"status": "success", "agents": agentInfoMap, "project_agent_mappings": projectAgentMappings}'
          schema:
            type: string
      summary: To invite an agent to the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/remove:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Remove
        in: body
        name: remove
        required: true
        schema:
          $ref: '#/definitions/handler.removeProjectAgentParams'
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: '{"project_id": uint64, "agent_uuid": string}'
          schema:
            type: string
      summary: To remove an agent from the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/handler.updateProjectAgentParams'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: '{"status": "success"}'
          schema:
            type: string
      summary: To update an agent from the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/attribution/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.AttributionRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at": timestamp}'
          schema:
            type: string
      summary: To run attribution query.
      tags:
      - CoreQuery
  /{project_id}/channels/filter_values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Channel
        in: query
        name: channel
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: '{"filter_values": []string}'
          schema:
            type: string
      summary: To filter on values for channel query.
      tags:
      - CoreQuery
  /{project_id}/channels/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/model.ChannelQuery'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.ChannelQueryResult, "cache": false, "refreshed_at": timestamp}'
          schema:
            type: string
      summary: To run a channel query.
      tags:
      - CoreQuery
  /{project_id}/dashboard/{dashboard_id}/units/query/web_analytics:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Web analytics units
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/handler.DashboardUnitsWebAnalyticsQuery'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": "result", "cache": "true", "refreshed_at": "timestamp"}'
          schema:
            type: string
      summary: To fetch result for website analytics dashboard queries.
      tags:
      - DashboardUnit
  /{project_id}/dashboards:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Dashboard'
            type: array
      summary: Fetches all dashboards for the given project id.
      tags:
      - Dashboard
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create new dashboard
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/handler.DashboardRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Dashboard'
            type: object
      summary: Creates a new dashboard for the given input.
      tags:
      - Dashboard
  /{project_id}/dashboards/{dashboard_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Update dashboard
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.UpdatableDashboard'
          type: object
      produces:
      - application/json
      responses:
        "202": {}
      summary: Updates an existing dashboard.
      tags:
      - Dashboard
  /{project_id}/dashboards/{dashboard_id}/units:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Fetches dashboard units for the given project and dashboard id.
      tags:
      - DashboardUnit
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Create dashboard unit
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.DashboardUnit'
            type: object
      summary: Creates a new dashboard unit for the given input.
      tags:
      - DashboardUnit
  /{project_id}/dashboards/{dashboard_id}/units/{unit_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Dashboard Unit ID
        in: path
        name: unit_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete an existing dashboard unit.
      tags:
      - DashboardUnit
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Dashboard Unit ID
        in: path
        name: unit_id
        required: true
        type: integer
      - description: Update dashboard unit
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully updated."}'
          schema:
            type: string
      summary: To update an existing dashboard unit.
      tags:
      - DashboardUnit
  /{project_id}/event_names:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"event_names": []string}'
          schema:
            type: string
      summary: Te fetch event names for a given project id.
      tags:
      - Events
  /{project_id}/event_names/{event_name}/properties:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Event Name
        in: path
        name: event_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: map[string]string
          schema:
            type: string
      summary: To get properties for a given event name.
      tags:
      - Events
  /{project_id}/event_names/{event_name}/properties/{property_name}/values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Event Name
        in: path
        name: event_name
        required: true
        type: integer
      - description: Property Name
        in: path
        name: property_name
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '[]string'
          schema:
            type: string
      summary: Creates a new dashboard unit for the given input.
      tags:
      - Events
  /{project_id}/factor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Factors query
        in: formData
        name: query
        required: true
        type: json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pattern_service_wrapper.FactorGraphResults'
            type: array
      summary: To run factors model for the given query.
      tags:
      - Factors
  /{project_id}/filters:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.API_FilterResponePayload'
            type: array
      summary: Get the list of existing filters.
      tags:
      - Filters
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.API_FilterRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
            type: object
      summary: To create a new filter.
      tags:
      - Filters
  /{project_id}/filters/{filter_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Filter ID
        in: path
        name: filter_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
            type: object
      summary: To delete an existing filter.
      tags:
      - Filters
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Filter ID
        in: path
        name: filter_id
        required: true
        type: integer
      - description: Update filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.API_FilterRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
            type: object
      summary: To update an existing filter.
      tags:
      - Filters
  /{project_id}/models:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"mid": uint64, "mt": string, "st": timestamp, "et": timestamp}'
          schema:
            items:
              type: string
            type: array
      summary: To get model infos for the given project id.
      tags:
      - Factors
  /{project_id}/queries:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To get list of all saved queries in project.
      tags:
      - SavedQuery
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create saved query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.SavedQueryRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To create a new saved query for given query.
      tags:
      - SavedQuery
  /{project_id}/queries/{query_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Query ID
        in: path
        name: query_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete an existing saved query.
      tags:
      - SavedQuery
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Query ID
        in: path
        name: query_id
        required: true
        type: integer
      - description: Update saved query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.SavedQueryUpdatePayload'
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully updated."}'
          schema:
            type: string
      summary: To update an existing saved query.
      tags:
      - SavedQuery
  /{project_id}/queries/search:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To search on existing saved queries.
      tags:
      - SavedQuery
  /{project_id}/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.QueryRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at": timestamp}'
          schema:
            type: string
      summary: To run a particular query from core query or dashboards.
      tags:
      - CoreQuery
  /{project_id}/reports:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "report": []ReportDescription}'
          schema:
            type: string
      summary: Get reports for given project id.
      tags:
      - Reports
  /{project_id}/reports/{report_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Report ID
        in: path
        name: report_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "report": "report"}'
          schema:
            type: string
      summary: Get report for given project and report id.
      tags:
      - Reports
  /{project_id}/settings:
    get:
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
            type: object
      summary: Retrieves the project settings for given project id.
      tags:
      - ProjectSettings
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Project Setting
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/model.ProjectSetting'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
            type: object
      summary: Update the project settings for given project id.
      tags:
      - ProjectSettings
  /{project_id}/user_properties:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: map[string]string
          schema:
            type: string
      summary: Gets users properties for the given project id.
      tags:
      - Users
  /{project_id}/user_properties/{property_name}/values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Property Name
        in: path
        name: property_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '[]string'
          schema:
            type: string
      summary: Get property values for given property name.
      tags:
      - Users
  /{project_id}/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Gets users for the given project id.
      tags:
      - Users
  /{project_id}/users/{user_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
            type: object
      summary: Get a user for the given project and user id.
      tags:
      - Users
  /{project_id}/v1/agents:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.v1.AgentInfoWithProjectMapping'
            type: array
      summary: Gets agents list for the given project id.
      tags:
      - V1Api
  /{project_id}/v1/dashboards/multi/{dashboard_ids}/units:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard IDs comma separated
        in: path
        name: dashboard_ids
        required: true
        type: string
      - description: Create dashboard unit
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Creates a new dashboard unit for the given input.
      tags:
      - V1Api
  /{project_id}/v1/dashboards/queries/{dashboard_id}/units:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Array of DashboardUnitRequestPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Creates a new dashboard unit for multiple given queries.
      tags:
      - V1Api
  /{project_id}/v1/event_names:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"event_names": map[string][]string}'
          schema:
            type: string
      summary: Get event names for the given project id.
      tags:
      - V1Api
  /{project_id}/v1/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query group
        in: body
        name: query_group
        required: true
        schema:
          $ref: '#/definitions/handler.QueryGroup'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at": timestamp}'
          schema:
            type: string
      summary: To run a particular query group from core query or dashboards.
      tags:
      - V1Api
swagger: "2.0"
