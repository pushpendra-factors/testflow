basePath: /projects
definitions:
  handler.API_FilterRequestPayload:
    properties:
      expr:
        type: string
      name:
        type: string
    type: object
  handler.API_FilterResponePayload:
    properties:
      deleted:
        type: boolean
      expr:
        type: string
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
    type: object
  handler.APISmartEventFilterRequestPayload:
    properties:
      expr:
        $ref: '#/definitions/model.SmartCRMEventFilter'
        type: object
      name:
        type: string
    type: object
  handler.APISmartEventFilterResponePayload:
    properties:
      expr:
        $ref: '#/definitions/model.SmartCRMEventFilter'
        type: object
      id:
        type: integer
      name:
        type: string
      project_id:
        type: integer
    type: object
  handler.AdwordsRequestPayload:
    properties:
      project_id:
        type: string
    type: object
  handler.AttributionRequestPayload:
    properties:
      query:
        $ref: '#/definitions/model.AttributionQuery'
        type: object
    type: object
  handler.DashboardRequestPayload:
    properties:
      description:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  handler.DashboardUnitWebAnalyticsCustomGroupQuery:
    properties:
      gbp:
        items:
          type: string
        type: array
      metrics:
        items:
          type: string
        type: array
      unit_id:
        type: integer
    type: object
  handler.DashboardUnitWebAnalyticsQueryName:
    properties:
      query_name:
        type: string
      unit_id:
        type: integer
    type: object
  handler.DashboardUnitsWebAnalyticsQuery:
    properties:
      custom_group_units:
        description: CustomGroupUnits - Customize query with group by properties and
          metrics.
        items:
          $ref: '#/definitions/handler.DashboardUnitWebAnalyticsCustomGroupQuery'
        type: array
      from:
        type: integer
      to:
        type: integer
      units:
        description: Units - Supports redundant metric keys with different unit_ids.
        items:
          $ref: '#/definitions/handler.DashboardUnitWebAnalyticsQueryName'
        type: array
    type: object
  handler.FacebookAddAccessTokenPayload:
    properties:
      int_facebook_access_token:
        type: string
      int_facebook_ad_account:
        type: string
      int_facebook_email:
        type: string
      int_facebook_user_id:
        type: string
      project_id:
        type: string
    type: object
  handler.QueryRequestPayload:
    properties:
      query:
        $ref: '#/definitions/model.Query'
        type: object
    type: object
  handler.SDKError:
    properties:
      auto_track_url:
        type: string
      domain:
        type: string
      error:
        type: string
      url:
        type: string
      user_id:
        type: string
    type: object
  handler.SalesforceEnableRequestPayload:
    properties:
      project_id:
        type: string
    type: object
  handler.SalesforceRedirectRequestPayload:
    properties:
      project_id:
        type: string
    type: object
  handler.SavedQueryRequestPayload:
    properties:
      query:
        type: string
      title:
        type: string
      type:
        type: integer
    type: object
  handler.SavedQueryUpdatePayload:
    properties:
      title:
        type: string
    type: object
  handler.agentInviteParams:
    properties:
      email:
        type: string
      role:
        type: integer
    required:
    - email
    type: object
  handler.removeProjectAgentParams:
    properties:
      agent_uuid:
        type: string
    required:
    - agent_uuid
    type: object
  handler.sdkSettingsResponse:
    properties:
      auto_form_capture:
        type: boolean
      auto_track:
        type: boolean
      exclude_bot:
        type: boolean
    type: object
  handler.updateProjectAgentParams:
    properties:
      agent_uuid:
        type: string
      role:
        type: integer
    required:
    - agent_uuid
    type: object
  model.AttributionKeyFilter:
    properties:
      attribution_key:
        type: string
      lop:
        type: string
      op:
        type: string
      pr:
        type: string
      ty:
        description: 'Type: categorical or numerical'
        type: string
      va:
        type: string
    type: object
  model.AttributionQuery:
    properties:
      attribution_key:
        type: string
      attribution_key_f:
        items:
          $ref: '#/definitions/model.AttributionKeyFilter'
        type: array
      attribution_methodology:
        type: string
      attribution_methodology_c:
        type: string
      ce:
        $ref: '#/definitions/model.QueryEventWithProperties'
        type: object
      ce_c:
        $ref: '#/definitions/model.QueryEventWithProperties'
        type: object
      cm:
        items:
          type: string
        type: array
      from:
        type: integer
      lbw:
        type: integer
      lfe:
        items:
          $ref: '#/definitions/model.QueryEventWithProperties'
        type: array
      to:
        type: integer
    type: object
  model.CRMFilterRule:
    properties:
      gen:
        description: previous or current
        enum:
        - curr
        - last
        type: string
      op:
        enum:
        - EQUAL
        - NOT EQUAL
        - GREATER THAN
        - LESS THAN
        - CONTAINS
        - NOT CONTAINS
        type: string
      value:
        description: value_any or property value
        type: object
    type: object
  model.ChannelGroupQueryV1:
    properties:
      cl:
        type: string
      query_group:
        items:
          $ref: '#/definitions/model.ChannelQueryV1'
        type: array
    type: object
  model.ChannelQuery:
    properties:
      breakdown:
        type: string
      channel:
        type: string
      filter_key:
        type: string
      filter_value:
        type: string
      from:
        description: unix timestamp
        type: integer
      match_type:
        description: optional
        type: string
      status:
        type: string
      to:
        description: unix timestamp
        type: integer
    type: object
  model.ChannelQueryV1:
    properties:
      channel:
        type: string
      filters:
        items:
          $ref: '#/definitions/model.FilterV1'
        type: array
      fr:
        type: integer
      gbt:
        type: object
      group_by:
        items:
          $ref: '#/definitions/model.GroupBy'
        type: array
      select_metrics:
        items:
          type: string
        type: array
      time_zone:
        type: string
      to:
        type: integer
    type: object
  model.Dashboard:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        description: Composite primary key, id + project_id + agent_id.
        type: integer
      name:
        type: string
      project_id:
        description: Foreign key dashboards(project_id) ref projects(id).
        type: integer
      type:
        type: string
      units_position:
        description: map[string]map[uint64]int -> map[unit_type]unit_id:unit_position
        type: string
      updated_at:
        type: string
    type: object
  model.DashboardUnit:
    properties:
      created_at:
        type: string
      dashboard_id:
        type: integer
      description:
        type: string
      id:
        description: Composite primary key, id + project_id.
        type: integer
      presentation:
        type: string
      project_id:
        description: Foreign key dashboard_units(project_id) ref projects(id).
        type: integer
      query:
        description: TODO (Anil) remove this field once we move to saved queries
        type: string
      query_id:
        type: integer
      settings:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.DashboardUnitRequestPayload:
    properties:
      description:
        type: string
      presentation:
        type: string
      query:
        description: TODO (Anil) remove this field once we move to saved queries
        type: string
      query_id:
        type: integer
      settings:
        type: string
      title:
        type: string
    type: object
  model.FactorsGoal:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_tracked_at:
        type: string
      name:
        type: string
      project_id:
        type: integer
      rule:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.FactorsGoalFilter:
    properties:
      en_en_ft:
        items:
          $ref: '#/definitions/model.KeyValueTuple'
        type: array
      en_us_ft:
        items:
          $ref: '#/definitions/model.KeyValueTuple'
        type: array
      ft:
        items:
          $ref: '#/definitions/model.KeyValueTuple'
        type: array
      st_en_ft:
        items:
          $ref: '#/definitions/model.KeyValueTuple'
        type: array
      st_us_ft:
        items:
          $ref: '#/definitions/model.KeyValueTuple'
        type: array
    type: object
  model.FactorsGoalRule:
    properties:
      en_en:
        type: string
      rule:
        $ref: '#/definitions/model.FactorsGoalFilter'
        type: object
      st_en:
        type: string
      vs:
        type: boolean
    type: object
  model.FactorsTrackedEvent:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      event_name_id:
        type: integer
      id:
        type: integer
      is_active:
        type: boolean
      last_tracked_at:
        type: string
      project_id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.FactorsTrackedUserProperty:
    properties:
      created_at:
        type: string
      created_by;default:null:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_tracked_at:
        type: string
      project_id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user_property_name:
        type: string
    type: object
  model.FilterV1:
    properties:
      condition:
        type: string
      logical_operator:
        type: string
      name:
        type: string
      property:
        type: string
      value:
        type: string
    type: object
  model.GroupBy:
    properties:
      name:
        type: string
      property:
        type: string
    type: object
  model.KeyValueTuple:
    properties:
      key:
        type: string
      lower_bound:
        type: number
      operator:
        type: boolean
      property_type:
        type: string
      upper_bound:
        type: number
      vl:
        type: string
    type: object
  model.Project:
    properties:
      created_at:
        type: string
      date_format:
        type: string
      id:
        type: integer
      name:
        type: string
      private_token:
        description: An index created on private_token.
        type: string
      project_uri:
        type: string
      time_format:
        type: string
      time_zone:
        type: string
      token:
        description: An index created on token.
        type: string
      updated_at:
        type: string
    type: object
  model.ProjectSetting:
    properties:
      archive_enabled:
        description: Archival related fields.
        type: boolean
      auto_form_capture:
        type: boolean
      auto_track:
        description: |-
          Using pointers to avoid update by default value.
          omit empty to avoid nil(filelds not updated) on resp json.
        type: boolean
      bigquery_enabled:
        type: boolean
      created_at:
        type: string
      exclude_bot:
        type: boolean
      int_adwords_customer_account_id:
        type: string
      int_adwords_enabled_agent_uuid:
        description: |-
          Adwords integration settings.
          Foreign key constraint int_adwords_enabled_agent_uuid -> agents(uuid)
          Todo: Set int_adwords_enabled_agent_uuid, int_adwords_customer_account_id to NULL
          for disabling adwords integration for the project.
        type: string
      int_facebook_access_token:
        type: string
      int_facebook_ad_account:
        type: string
      int_facebook_agent_uuid:
        type: string
      int_facebook_email:
        description: Facebook settings
        type: string
      int_facebook_user_id:
        type: string
      int_hubspot:
        description: Hubspot integration settings.
        type: boolean
      int_hubspot_api_key:
        type: string
      int_salesforce_enabled_agent_uuid:
        description: Salesforce settings
        type: string
      int_segment:
        description: Segment integration settings.
        type: boolean
      updated_at:
        type: string
    type: object
  model.PropertyFilter:
    properties:
      logical_op:
        enum:
        - AND
        type: string
      property_name:
        type: string
      rules:
        items:
          $ref: '#/definitions/model.CRMFilterRule'
        type: array
    type: object
  model.Queries:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      created_by_name:
        type: string
      id:
        description: Composite primary key, id + project_id.
        type: integer
      is_deleted:
        type: boolean
      project_id:
        description: Foreign key queries(project_id) ref projects(id).
        type: integer
      query:
        type: string
      title:
        type: string
      type:
        type: integer
      updated_at:
        type: string
    type: object
  model.Query:
    properties:
      cl:
        type: string
      ec:
        description: all or any
        type: string
      ewp:
        items:
          $ref: '#/definitions/model.QueryEventWithProperties'
        type: array
      fr:
        type: integer
      gbp:
        items:
          $ref: '#/definitions/model.QueryGroupByProperty'
        type: array
      gbt:
        type: object
      ovp:
        description: 'Deprecated: Keeping it for old dashboard units.'
        type: boolean
      see:
        type: integer
      sse:
        type: integer
      to:
        type: integer
      ty:
        type: string
      tz:
        type: string
    type: object
  model.QueryEventWithProperties:
    properties:
      na:
        type: string
      pr:
        items:
          $ref: '#/definitions/model.QueryProperty'
        type: array
    type: object
  model.QueryGroup:
    properties:
      query_group:
        items:
          $ref: '#/definitions/model.Query'
        type: array
    type: object
  model.QueryGroupByProperty:
    properties:
      en:
        description: 'Entity: user or event.'
        type: string
      ena:
        description: group by specific event name.
        type: string
      eni:
        type: integer
      grn:
        description: currently used only for datetime - year/month/week/day/hour
        type: string
      in:
        type: integer
      pr:
        type: string
      pty:
        description: Property type categorical / numerical.
        type: string
    type: object
  model.QueryProperty:
    properties:
      en:
        description: 'Entity: user or event.'
        type: string
      lop:
        type: string
      op:
        type: string
      pr:
        type: string
      ty:
        description: 'Type: categorical or numerical'
        type: string
      va:
        type: string
    type: object
  model.SmartCRMEventFilter:
    properties:
      description:
        type: string
      filters:
        items:
          $ref: '#/definitions/model.PropertyFilter'
        type: array
      logical_op:
        enum:
        - AND
        type: string
      object_type:
        enum:
        - salesforce[account
        - contact
        - lead]
        - hubspot[contact]
        type: string
      property_evaluation_type:
        description: any change or specific
        enum:
        - specific
        - any
        type: string
      source:
        enum:
        - salesforce
        - hubspot
        type: string
      timestamp_reference_field:
        enum:
        - timestamp_in_track
        - ' <any property name>'
        type: string
    type: object
  model.UpdatableDashboard:
    properties:
      description:
        type: string
      name:
        type: string
      type:
        type: string
      units_position:
        additionalProperties:
          additionalProperties:
            type: integer
          type: object
        type: object
    type: object
  model.User:
    properties:
      ampuserId:
        type: string
      c_uid:
        description: |-
          UserId provided by the customer.
          An unique index is creatd on ProjectId+UserId.
        type: string
      created_at:
        type: string
      id:
        description: Composite primary key with project_id and random uuid.
        type: string
      join_timestamp:
        description: unix epoch timestamp in seconds.
        type: integer
      project_id:
        description: |-
          Below are the foreign key constraints added in creation script.
          project_id -> projects(id)
        type: integer
      properties:
        description: Not part of table, but part of json. Stored in UserProperties
          table.
        type: string
      properties_id:
        type: string
      seg_aid:
        type: string
      updated_at:
        type: string
    type: object
  pattern_service_wrapper.FactorGraphResults:
    properties:
      charts:
        items:
          $ref: '#/definitions/pattern_service_wrapper.graphResult'
        type: array
    type: object
  pattern_service_wrapper.graphResult:
    properties:
      datasets:
        items:
          additionalProperties: true
          type: object
        type: array
      explanations:
        items:
          type: string
        type: array
      header:
        type: string
      labels:
        items:
          type: string
        type: array
      type:
        type: string
      x_label:
        type: string
      y_label:
        type: string
    type: object
  sdk.AddUserPropertiesPayload:
    properties:
      client_ip:
        type: string
      create_user:
        description: if create_user is true, create user with given id.
        type: boolean
      properties:
        $ref: '#/definitions/util.PropertiesMap'
        type: object
      timestamp:
        type: integer
      user_id:
        type: string
    type: object
  sdk.AddUserPropertiesResponse:
    properties:
      error:
        type: string
      message:
        type: string
      user_id:
        type: string
    type: object
  sdk.IdentifyPayload:
    properties:
      c_uid:
        description: if create_user is true, create user with given id.
        type: string
      create_user:
        type: boolean
      join_timestamp:
        description: |-
          join_timestamp to use at the time of creating user,
          if not provided, request timestamp will be used.
        type: integer
      page_url:
        description: identify overwrite info
        type: string
      source:
        type: string
      timestamp:
        type: integer
      user_id:
        type: string
    type: object
  sdk.IdentifyResponse:
    properties:
      error:
        type: string
      message:
        type: string
      user_id:
        type: string
    type: object
  sdk.Response:
    properties:
      error:
        type: string
      event_id:
        type: string
      message:
        type: string
    type: object
  sdk.TrackPayload:
    properties:
      auto:
        type: boolean
      c_event_id:
        type: string
      client_ip:
        type: string
      create_user:
        description: 'internal: create user with the user_id given, if true.'
        type: boolean
      event_id:
        type: string
      event_name:
        type: string
      event_properties:
        $ref: '#/definitions/util.PropertiesMap'
        type: object
      project_id:
        type: integer
      smart_event:
        type: string
      timestamp:
        type: integer
      user_agent:
        type: string
      user_id:
        type: string
      user_properties:
        $ref: '#/definitions/util.PropertiesMap'
        type: object
    type: object
  sdk.TrackResponse:
    properties:
      c_event_id:
        type: string
      error:
        type: string
      event_id:
        type: string
      message:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  sdk.UpdateEventPropertiesPayload:
    properties:
      event_id:
        type: string
      properties:
        $ref: '#/definitions/util.PropertiesMap'
        type: object
      timestamp:
        type: integer
      user_agent:
        type: string
    type: object
  sdk.UpdateEventPropertiesResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  segment.App:
    properties:
      build:
        type: object
      name:
        type: string
      namespace:
        type: string
      version:
        type: object
    type: object
  segment.Campaign:
    properties:
      content:
        type: string
      medium:
        type: string
      name:
        type: string
      source:
        type: string
      term:
        type: string
    type: object
  segment.Context:
    properties:
      app:
        $ref: '#/definitions/segment.App'
        type: object
      campaign:
        $ref: '#/definitions/segment.Campaign'
        type: object
      device:
        $ref: '#/definitions/segment.Device'
        type: object
      ip:
        type: string
      locale:
        type: string
      location:
        $ref: '#/definitions/segment.Location'
        type: object
      network:
        $ref: '#/definitions/segment.Network'
        type: object
      os:
        $ref: '#/definitions/segment.OS'
        type: object
      page:
        $ref: '#/definitions/segment.Page'
        type: object
      screen:
        $ref: '#/definitions/segment.Screen'
        type: object
      timezone:
        type: string
      userAgent:
        type: string
    type: object
  segment.Device:
    properties:
      adTrackingEnabled:
        type: boolean
      advertisingId:
        type: string
      id:
        type: string
      manufacturer:
        type: string
      model:
        type: string
      name:
        type: string
      token:
        type: string
      type:
        type: string
    type: object
  segment.Event:
    properties:
      anonymousId:
        type: string
      channel:
        type: string
      context:
        $ref: '#/definitions/segment.Context'
        type: object
      event:
        type: string
      messageId:
        type: string
      name:
        type: string
      properties:
        $ref: '#/definitions/util.PropertiesMap'
        type: object
      timestamp:
        type: string
      traits:
        type: string
      type:
        type: string
      userId:
        type: string
      version:
        type: object
    type: object
  segment.EventResponse:
    properties:
      error:
        type: string
      event_id:
        type: string
      message:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  segment.Location:
    properties:
      city:
        type: string
      country:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      region:
        type: string
    type: object
  segment.Network:
    properties:
      bluetooth:
        type: boolean
      carrier:
        type: string
      cellular:
        type: boolean
      wifi:
        type: boolean
    type: object
  segment.OS:
    properties:
      name:
        type: string
      version:
        type: object
    type: object
  segment.Page:
    properties:
      referrer:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  segment.Screen:
    properties:
      density:
        type: number
      height:
        type: number
      width:
        type: number
    type: object
  util.PropertiesMap:
    additionalProperties: true
    type: object
  v1.AgentInfoWithProjectMapping:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      invited_by:
        type: string
      is_email_verified:
        type: boolean
      last_logged_in:
        type: string
      last_name:
        type: string
      phone:
        type: string
      project_id:
        type: integer
      role:
        type: integer
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  v1.CreateFactorsGoalParams:
    properties:
      name:
        type: string
      rule:
        $ref: '#/definitions/model.FactorsGoalRule'
        type: object
    type: object
  v1.CreateFactorsTrackedEventParams:
    properties:
      event_name:
        type: string
    required:
    - event_name
    type: object
  v1.CreateTrackeduserPropertyParams:
    properties:
      user_property_name:
        type: string
    required:
    - user_property_name
    type: object
  v1.RemoveFactorsGoalParams:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  v1.RemoveFactorsTrackedEventParams:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  v1.RemoveFactorsTrackedUserPropertyParams:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  v1.SearchFactorsGoalParams:
    properties:
      search_text:
        type: string
    required:
    - search_text
    type: object
  v1.UpdateFactorsGoalParams:
    properties:
      id:
        type: integer
      name:
        type: string
      rule:
        $ref: '#/definitions/model.FactorsGoalRule'
        type: object
    required:
    - id
    - name
    - rule
    type: object
info:
  contact: {}
  description: Factors usage doc for golang api server.
  license: {}
  title: Factors Backend Api
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"projects": []Project}'
          schema:
            type: string
      summary: To fetch the list of authorized projects for the user.
      tags:
      - Projects
  /{project_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Edit project
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Project'
      summary: To edit the allowed fields of an existing project.
      tags:
      - Projects
  /{project_id}/agents:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"agents": agentInfoMap, "project_agent_mappings": projectAgentMappings}'
          schema:
            type: string
      summary: Gets agents list for the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/invite:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Invite
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/handler.agentInviteParams'
      produces:
      - application/json
      responses:
        "201":
          description: '{"status": "success", "agents": agentInfoMap, "project_agent_mappings":
            projectAgentMappings}'
          schema:
            type: string
      summary: To invite an agent to the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/remove:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Remove
        in: body
        name: remove
        required: true
        schema:
          $ref: '#/definitions/handler.removeProjectAgentParams'
      produces:
      - application/json
      responses:
        "202":
          description: '{"project_id": uint64, "agent_uuid": string}'
          schema:
            type: string
      summary: To remove an agent from the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/agents/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/handler.updateProjectAgentParams'
      produces:
      - application/json
      responses:
        "201":
          description: '{"status": "success"}'
          schema:
            type: string
      summary: To update an agent from the given project id.
      tags:
      - ProjectAdmin
  /{project_id}/attribution/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.AttributionRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at":
            timestamp}'
          schema:
            type: string
      summary: To run attribution query.
      tags:
      - CoreQuery
  /{project_id}/channels/filter_values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Channel
        in: query
        name: channel
        required: true
        type: string
      - description: Filter
        in: query
        name: filter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: '{"filter_values": []string}'
          schema:
            type: string
      summary: To filter on values for channel query.
      tags:
      - CoreQuery
  /{project_id}/channels/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/model.ChannelQuery'
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.ChannelQueryResult, "cache": false, "refreshed_at":
            timestamp}'
          schema:
            type: string
      summary: To run a channel query.
      tags:
      - CoreQuery
  /{project_id}/dashboard/{dashboard_id}/units/query/web_analytics:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Web analytics units
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/handler.DashboardUnitsWebAnalyticsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": "result", "cache": "true", "refreshed_at": "timestamp"}'
          schema:
            type: string
      summary: To fetch result for website analytics dashboard queries.
      tags:
      - DashboardUnit
  /{project_id}/dashboards:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Dashboard'
            type: array
      summary: Fetches all dashboards for the given project id.
      tags:
      - Dashboard
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create new dashboard
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/handler.DashboardRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Dashboard'
      summary: Creates a new dashboard for the given input.
      tags:
      - Dashboard
  /{project_id}/dashboards/{dashboard_id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Update dashboard
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.UpdatableDashboard'
      produces:
      - application/json
      responses:
        "202":
          description: ""
      summary: Updates an existing dashboard.
      tags:
      - Dashboard
  /{project_id}/dashboards/{dashboard_id}/units:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Fetches dashboard units for the given project and dashboard id.
      tags:
      - DashboardUnit
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Create dashboard unit
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.DashboardUnit'
      summary: Creates a new dashboard unit for the given input.
      tags:
      - DashboardUnit
  /{project_id}/dashboards/{dashboard_id}/units/{unit_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Dashboard Unit ID
        in: path
        name: unit_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete an existing dashboard unit.
      tags:
      - DashboardUnit
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Dashboard Unit ID
        in: path
        name: unit_id
        required: true
        type: integer
      - description: Update dashboard unit
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully updated."}'
          schema:
            type: string
      summary: To update an existing dashboard unit.
      tags:
      - DashboardUnit
  /{project_id}/event_names:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"event_names": []string}'
          schema:
            type: string
      summary: Te fetch event names for a given project id.
      tags:
      - Events
  /{project_id}/event_names/{event_name}/properties:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Event Name
        in: path
        name: event_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: map[string]string
          schema:
            type: string
      summary: To get properties for a given event name.
      tags:
      - Events
  /{project_id}/event_names/{event_name}/properties/{property_name}/values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Event Name
        in: path
        name: event_name
        required: true
        type: integer
      - description: Property Name
        in: path
        name: property_name
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '[]string'
          schema:
            type: string
      summary: Creates a new dashboard unit for the given input.
      tags:
      - Events
  /{project_id}/factor:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Factors query
        in: body
        name: query
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pattern_service_wrapper.FactorGraphResults'
            type: array
      summary: To run factors model for the given query.
      tags:
      - Factors
  /{project_id}/filters:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.API_FilterResponePayload'
            type: array
      summary: Get the list of existing filters.
      tags:
      - Filters
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.API_FilterRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
      summary: To create a new filter.
      tags:
      - Filters
  /{project_id}/filters/{filter_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Filter ID
        in: path
        name: filter_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
      summary: To delete an existing filter.
      tags:
      - Filters
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Filter ID
        in: path
        name: filter_id
        required: true
        type: integer
      - description: Update filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.API_FilterRequestPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handler.API_FilterResponePayload'
      summary: To update an existing filter.
      tags:
      - Filters
  /{project_id}/models:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"mid": uint64, "mt": string, "st": timestamp, "et": timestamp}'
          schema:
            items:
              type: string
            type: array
      summary: To get model infos for the given project id.
      tags:
      - Factors
  /{project_id}/queries:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To get list of all saved queries in project.
      tags:
      - SavedQuery
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create saved query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.SavedQueryRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To create a new saved query for given query.
      tags:
      - SavedQuery
  /{project_id}/queries/{query_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Query ID
        in: path
        name: query_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete an existing saved query.
      tags:
      - SavedQuery
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Query ID
        in: path
        name: query_id
        required: true
        type: integer
      - description: Update saved query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.SavedQueryUpdatePayload'
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully updated."}'
          schema:
            type: string
      summary: To update an existing saved query.
      tags:
      - SavedQuery
  /{project_id}/queries/search:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            items:
              $ref: '#/definitions/model.Queries'
            type: array
      summary: To search on existing saved queries.
      tags:
      - SavedQuery
  /{project_id}/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/handler.QueryRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at":
            timestamp}'
          schema:
            type: string
      summary: To run a particular query from core query or dashboards.
      tags:
      - CoreQuery
  /{project_id}/reports:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "report": []ReportDescription}'
          schema:
            type: string
      summary: Get reports for given project id.
      tags:
      - Reports
  /{project_id}/reports/{report_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Report ID
        in: path
        name: report_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "report": "report"}'
          schema:
            type: string
      summary: Get report for given project and report id.
      tags:
      - Reports
  /{project_id}/settings:
    get:
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
      summary: Retrieves the project settings for given project id.
      tags:
      - ProjectSettings
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Project Setting
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/model.ProjectSetting'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
      summary: Update the project settings for given project id.
      tags:
      - ProjectSettings
  /{project_id}/user_properties:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: map[string]string
          schema:
            type: string
      summary: Gets users properties for the given project id.
      tags:
      - Users
  /{project_id}/user_properties/{property_name}/values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Property Name
        in: path
        name: property_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '[]string'
          schema:
            type: string
      summary: Get property values for given property name.
      tags:
      - Users
  /{project_id}/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Gets users for the given project id.
      tags:
      - Users
  /{project_id}/users/{user_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get a user for the given project and user id.
      tags:
      - Users
  /{project_id}/v1/agents:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.AgentInfoWithProjectMapping'
            type: array
      summary: Gets agents list for the given project id.
      tags:
      - V1Api
      - ProjectAdmin
  /{project_id}/v1/channels/config:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Channel
        in: query
        name: channel
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.ChannelConfigResult'
          schema:
            type: string
      summary: To get config for the required channel.
      tags:
      - ChannelQuery
      - CoreQuery
  /{project_id}/v1/channels/filter_values:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Channel
        in: query
        name: channel
        required: true
        type: string
      - description: campaign
        in: query
        name: filter_object
        required: true
        type: string
      - description: name
        in: query
        name: filter_property
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.ChannelFilterValues}'
          schema:
            type: string
      summary: To filter on values for channel query.
      tags:
      - ChannelQuery
      - CoreQuery
  /{project_id}/v1/channels/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query payload
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/model.ChannelGroupQueryV1'
      produces:
      - application/json
      responses:
        "200":
          description: '{result:M.ChannelResultGroupV1}'
          schema:
            type: string
      summary: To run a channel query.
      tags:
      - ChannelQuery
      - CoreQuery
  /{project_id}/v1/dashboards/{dashboard_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete an existing dashboard.
      tags:
      - Dashboard
      - V1Api
  /{project_id}/v1/dashboards/{dashboard_id}/units/multi/{unit_ids}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Dashboard Unit IDs
        in: path
        name: unit_ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: '{"message": "Successfully deleted."}'
          schema:
            type: string
      summary: To delete multiple existing dashboard unit.
      tags:
      - DashboardUnit
  /{project_id}/v1/dashboards/multi/{dashboard_ids}/units:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard IDs comma separated
        in: path
        name: dashboard_ids
        required: true
        type: string
      - description: Create dashboard unit
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Creates a new dashboard unit for each of the given dashboard Ids.
      tags:
      - Dashboard
      - DashboardUnit
      - V1Api
  /{project_id}/v1/dashboards/queries/{dashboard_id}/units:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Array of DashboardUnitRequestPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.DashboardUnitRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.DashboardUnit'
            type: array
      summary: Creates a new dashboard unit for each of the given queries.
      tags:
      - Dashboard
      - DashboardUnit
      - V1Api
  /{project_id}/v1/event_names:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"event_names": map[string][]string}'
          schema:
            type: string
      summary: Get event names for the given project id.
      tags:
      - V1Api
  /{project_id}/v1/factors/goals:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FactorsGoal'
            type: array
      summary: Get All the saved goals for a given project
      tags:
      - V1FactorsApi
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Create
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/v1.CreateFactorsGoalParams'
      produces:
      - application/json
      responses:
        "201":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Create a saved goal with specified name and rule
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/goals/remove:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Remove
        in: body
        name: remove
        required: true
        schema:
          $ref: '#/definitions/v1.RemoveFactorsGoalParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Remove a saved goal
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/goals/search:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Search
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/v1.SearchFactorsGoalParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FactorsGoal'
            type: array
      summary: Search on saved goals
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/goals/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateFactorsGoalParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Update a saved goal with specified name and rule
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/tracked_event:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FactorsTrackedEvent'
            type: array
      summary: Get all tracked events
      tags:
      - V1FactorsApi
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: create
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/v1.CreateFactorsTrackedEventParams'
      produces:
      - application/json
      responses:
        "201":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Create a tracked event
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/tracked_event/remove:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: remove
        in: body
        name: remove
        required: true
        schema:
          $ref: '#/definitions/v1.RemoveFactorsTrackedEventParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Remove a tracked event
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/tracked_user_property:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FactorsTrackedUserProperty'
            type: array
      summary: Get all tracked user properties
      tags:
      - V1FactorsApi
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: create
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/v1.CreateTrackeduserPropertyParams'
      produces:
      - application/json
      responses:
        "201":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Create a tracked user property
      tags:
      - V1FactorsApi
  /{project_id}/v1/factors/tracked_user_property/remove:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: remove
        in: body
        name: remove
        required: true
        schema:
          $ref: '#/definitions/v1.RemoveFactorsTrackedUserPropertyParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"id": uint64, "status": string}'
          schema:
            type: string
      summary: Remove a tracked user property
      tags:
      - V1FactorsApi
  /{project_id}/v1/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: query
        name: dashboard_id
        type: integer
      - description: Dashboard Unit ID
        in: query
        name: dashboard_unit_id
        type: integer
      - description: Query group
        in: body
        name: query_group
        required: true
        schema:
          $ref: '#/definitions/model.QueryGroup'
      produces:
      - application/json
      responses:
        "200":
          description: '{"result": model.QueryResult, "cache": false, "refreshed_at":
            timestamp}'
          schema:
            type: string
      summary: To run events core query as a query group for user and event count.
      tags:
      - V1Api
  /{project_id}/v1/smart_event:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.APISmartEventFilterResponePayload'
            type: array
      summary: Get the list of existing smart event filters.
      tags:
      - V1ApiSmartEvent
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Smart event type
        enum:
        - crm
        in: query
        name: type
        required: true
        type: string
      - description: Create smart event filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.APISmartEventFilterRequestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.APISmartEventFilterResponePayload'
      summary: To create a new smart event filter.
      tags:
      - V1ApiSmartEvent
    put:
      consumes:
      - application/json
      parameters:
      - description: Filter ID
        in: query
        name: filter_id
        required: true
        type: integer
      - description: Update filter
        in: body
        name: filter
        required: true
        schema:
          $ref: '#/definitions/handler.APISmartEventFilterRequestPayload'
      - description: Smart event type
        enum:
        - crm
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/handler.APISmartEventFilterResponePayload'
      summary: To update an existing smart event filter.
      tags:
      - V1ApiSmartEvent
  /integrations/adwords/enable:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.AdwordsRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
      summary: To enable adwords for the project.
      tags:
      - Integrations
  /integrations/facebook/add_access_token:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.FacebookAddAccessTokenPayload'
      produces:
      - application/json
      responses:
        "202":
          description: '{"error": "Error message"}'
          schema:
            type: string
      summary: To add access token for Facebook.
      tags:
      - Integrations
  /integrations/salesforce/auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SalesforceRedirectRequestPayload'
      produces:
      - application/json
      responses:
        "307":
          description: '{"redirectURL": redirectURL}'
          schema:
            type: string
      summary: For Salesforce authentication. Redirects to Salesforce oauth page.
      tags:
      - Integrations
  /integrations/salesforce/auth/callback:
    get:
      consumes:
      - application/json
      parameters:
      - description: Code
        in: query
        name: code
        required: true
        type: string
      - description: State
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "308":
          description: redirectURL
          schema:
            type: string
      summary: Handles the callback url from salesforce auth redirect url and requests
        access token.
      tags:
      - Integrations
  /integrations/salesforce/enable:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SalesforceEnableRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProjectSetting'
      summary: To enable Salesforce for a project.
      tags:
      - Integrations
  /integrations/segment:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Event payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/segment.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/segment.EventResponse'
      security:
      - ApiKeyAuth: []
      summary: To create event from segment.
      tags:
      - SDK
      - Integrations
  /integrations/segment_platform:
    post:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      - description: Dashboard ID
        in: path
        name: dashboard_id
        required: true
        type: integer
      - description: Event payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/segment.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/segment.EventResponse'
      security:
      - ApiKeyAuth: []
      summary: To create event from segment.
      tags:
      - SDK
      - Integrations
  /sdk/amp/event/track:
    post:
      consumes:
      - application/json
      parameters:
      - description: SDK token
        in: query
        name: token
        required: true
        type: string
      - description: Client id
        in: query
        name: client_id
        required: true
        type: string
      - description: Source url
        in: query
        name: source_url
        type: string
      - description: Referrer
        in: query
        name: referrer
        type: string
      - description: Title
        in: query
        name: title
        type: string
      - description: Page load time in milliseconds
        in: query
        name: page_load_time_in_ms
        type: number
      - description: Screen height
        in: query
        name: screen_height
        type: number
      - description: Screen width
        in: query
        name: screen_width
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sdk.Response'
      summary: Create a new AMP track request.
      tags:
      - SDK
  /sdk/amp/event/update_properties:
    post:
      consumes:
      - application/json
      parameters:
      - description: SDK token
        in: query
        name: token
        required: true
        type: string
      - description: Client id
        in: query
        name: client_id
        required: true
        type: string
      - description: Source url
        in: query
        name: source_url
        type: string
      - description: Page spent time
        in: query
        name: page_spent_time
        type: number
      - description: Page scroll percent
        in: query
        name: page_scroll_percent
        type: number
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/sdk.Response'
      summary: To update AMP event properties for an existing event.
      tags:
      - SDK
  /sdk/amp/user/identify:
    post:
      consumes:
      - application/json
      parameters:
      - description: SDK token
        in: query
        name: token
        required: true
        type: string
      - description: Client id
        in: query
        name: client_id
        required: true
        type: string
      - description: Customer user id
        in: query
        name: customer_user_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sdk.IdentifyResponse'
      summary: To identify factors user with customer user id from AMP pages.
      tags:
      - SDK
  /sdk/event/track:
    post:
      consumes:
      - application/json
      parameters:
      - description: Track payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sdk.TrackPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sdk.TrackResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new track request.
      tags:
      - SDK
  /sdk/event/track/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: Array of Track payload
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/sdk.TrackPayload'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/sdk.TrackResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Create a new bulk events track request.
      tags:
      - SDK
  /sdk/event/update_properties:
    post:
      consumes:
      - application/json
      parameters:
      - description: Update properties payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sdk.UpdateEventPropertiesPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/sdk.UpdateEventPropertiesResponse'
      security:
      - ApiKeyAuth: []
      summary: To update event properties for an existing event.
      tags:
      - SDK
  /sdk/project/get_settings:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.sdkSettingsResponse'
      security:
      - ApiKeyAuth: []
      summary: To get project settings.
      tags:
      - SDK
  /sdk/service/error:
    post:
      consumes:
      - application/json
      parameters:
      - description: Error payload
        in: body
        name: error
        required: true
        schema:
          $ref: '#/definitions/handler.SDKError'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: To report errors on SDK requests.
      tags:
      - SDK
  /sdk/service/status:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "I''m ok."}'
          schema:
            type: string
      summary: To check the status and availability of the sdk service.
      tags:
      - SDK
  /sdk/user/add_properties:
    post:
      consumes:
      - application/json
      parameters:
      - description: Add user properties payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sdk.AddUserPropertiesPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sdk.AddUserPropertiesResponse'
      security:
      - ApiKeyAuth: []
      summary: To update properties of a factors user.
      tags:
      - SDK
  /sdk/user/identify:
    post:
      consumes:
      - application/json
      parameters:
      - description: Identify payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sdk.IdentifyPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sdk.IdentifyResponse'
      security:
      - ApiKeyAuth: []
      summary: To identify a factors user id with customer user id.
      tags:
      - SDK
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
