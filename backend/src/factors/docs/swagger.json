{
    "swagger": "2.0",
    "info": {
        "description": "Factors usage doc for golang api server.",
        "title": "Factors Backend Api",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "basePath": "/projects",
    "paths": {
        "/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "To fetch the list of authorized projects for the user.",
                "responses": {
                    "200": {
                        "description": "{\"projects\": []Project}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "To edit the allowed fields of an existing project.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Edit project",
                        "name": "unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Project"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Project"
                        }
                    }
                }
            }
        },
        "/{project_id}/agents": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectAdmin"
                ],
                "summary": "Gets agents list for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"agents\": agentInfoMap, \"project_agent_mappings\": projectAgentMappings}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/agents/invite": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectAdmin"
                ],
                "summary": "To invite an agent to the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Invite",
                        "name": "invite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.agentInviteParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"status\": \"success\", \"agents\": agentInfoMap, \"project_agent_mappings\": projectAgentMappings}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/agents/remove": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectAdmin"
                ],
                "summary": "To remove an agent from the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Remove",
                        "name": "remove",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.removeProjectAgentParams"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"project_id\": uint64, \"agent_uuid\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/agents/update": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectAdmin"
                ],
                "summary": "To update an agent from the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.updateProjectAgentParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"status\": \"success\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/attribution/query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CoreQuery"
                ],
                "summary": "To run attribution query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "dashboard_unit_id",
                        "in": "query"
                    },
                    {
                        "description": "Query payload",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AttributionRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"result\": model.QueryResult, \"cache\": false, \"refreshed_at\": timestamp}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/channels/filter_values": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CoreQuery"
                ],
                "summary": "To filter on values for channel query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter",
                        "name": "filter",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "{\"filter_values\": []string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/channels/query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CoreQuery"
                ],
                "summary": "To run a channel query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "dashboard_unit_id",
                        "in": "query"
                    },
                    {
                        "description": "Query payload",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChannelQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"result\": model.ChannelQueryResult, \"cache\": false, \"refreshed_at\": timestamp}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/dashboard/{dashboard_id}/units/query/web_analytics": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DashboardUnit"
                ],
                "summary": "To fetch result for website analytics dashboard queries.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Web analytics units",
                        "name": "unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DashboardUnitsWebAnalyticsQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"result\": \"result\", \"cache\": \"true\", \"refreshed_at\": \"timestamp\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/dashboards": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Fetches all dashboards for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Dashboard"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Creates a new dashboard for the given input.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create new dashboard",
                        "name": "dashboard",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DashboardRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Dashboard"
                        }
                    }
                }
            }
        },
        "/{project_id}/dashboards/{dashboard_id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Updates an existing dashboard.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update dashboard",
                        "name": "unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdatableDashboard"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    }
                }
            }
        },
        "/{project_id}/dashboards/{dashboard_id}/units": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DashboardUnit"
                ],
                "summary": "Fetches dashboard units for the given project and dashboard id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.DashboardUnit"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DashboardUnit"
                ],
                "summary": "Creates a new dashboard unit for the given input.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create dashboard unit",
                        "name": "unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DashboardUnitRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.DashboardUnit"
                        }
                    }
                }
            }
        },
        "/{project_id}/dashboards/{dashboard_id}/units/{unit_id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DashboardUnit"
                ],
                "summary": "To update an existing dashboard unit.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "unit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update dashboard unit",
                        "name": "unit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DashboardUnitRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"message\": \"Successfully updated.\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DashboardUnit"
                ],
                "summary": "To delete an existing dashboard unit.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "unit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"message\": \"Successfully deleted.\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/event_names": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Te fetch event names for a given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"event_names\": []string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/event_names/{event_name}/properties": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "To get properties for a given event name.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "map[string]string",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/event_names/{event_name}/properties/{property_name}/values": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Creates a new dashboard unit for the given input.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Event Name",
                        "name": "event_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Property Name",
                        "name": "property_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]string",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/factor": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Factors"
                ],
                "summary": "To run factors model for the given query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Factors query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pattern_service_wrapper.FactorGraphResults"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/filters": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "Get the list of existing filters.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.API_FilterResponePayload"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "To create a new filter.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.API_FilterRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.API_FilterResponePayload"
                        }
                    }
                }
            }
        },
        "/{project_id}/filters/{filter_id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "To update an existing filter.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter ID",
                        "name": "filter_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update filter",
                        "name": "filter",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.API_FilterRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/handler.API_FilterResponePayload"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Filters"
                ],
                "summary": "To delete an existing filter.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter ID",
                        "name": "filter_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/handler.API_FilterResponePayload"
                        }
                    }
                }
            }
        },
        "/{project_id}/models": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Factors"
                ],
                "summary": "To get model infos for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"mid\": uint64, \"mt\": string, \"st\": timestamp, \"et\": timestamp}",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/queries": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SavedQuery"
                ],
                "summary": "To get list of all saved queries in project.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Queries"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SavedQuery"
                ],
                "summary": "To create a new saved query for given query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create saved query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SavedQueryRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Queries"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/queries/search": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SavedQuery"
                ],
                "summary": "To search on existing saved queries.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Queries"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/queries/{query_id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SavedQuery"
                ],
                "summary": "To update an existing saved query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query ID",
                        "name": "query_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update saved query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.SavedQueryUpdatePayload"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"message\": \"Successfully updated.\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SavedQuery"
                ],
                "summary": "To delete an existing saved query.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Query ID",
                        "name": "query_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"message\": \"Successfully deleted.\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CoreQuery"
                ],
                "summary": "To run a particular query from core query or dashboards.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "dashboard_unit_id",
                        "in": "query"
                    },
                    {
                        "description": "Query payload",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.QueryRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"result\": model.QueryResult, \"cache\": false, \"refreshed_at\": timestamp}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/reports": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get reports for given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"status\": \"success\", \"report\": []ReportDescription}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/reports/{report_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get report for given project and report id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "report_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"status\": \"success\", \"report\": \"report\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/settings": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectSettings"
                ],
                "summary": "Retrieves the project settings for given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProjectSetting"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectSettings"
                ],
                "summary": "Update the project settings for given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project Setting",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ProjectSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProjectSetting"
                        }
                    }
                }
            }
        },
        "/{project_id}/user_properties": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets users properties for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "map[string]string",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/user_properties/{property_name}/values": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get property values for given property name.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Property Name",
                        "name": "property_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]string",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/users": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Gets users for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/users/{user_id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user for the given project and user id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/agents": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1Api",
                    "ProjectAdmin"
                ],
                "summary": "Gets agents list for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.AgentInfoWithProjectMapping"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/dashboards/multi/{dashboard_ids}/units": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard",
                    "DashboardUnit",
                    "V1Api"
                ],
                "summary": "Creates a new dashboard unit for each of the given dashboard Ids.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Dashboard IDs comma separated",
                        "name": "dashboard_ids",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create dashboard unit",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DashboardUnitRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.DashboardUnit"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/dashboards/queries/{dashboard_id}/units": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard",
                    "DashboardUnit",
                    "V1Api"
                ],
                "summary": "Creates a new dashboard unit for each of the given queries.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array of DashboardUnitRequestPayload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DashboardUnitRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.DashboardUnit"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/dashboards/{dashboard_id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard",
                    "V1Api"
                ],
                "summary": "To delete an existing dashboard.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "{\"message\": \"Successfully deleted.\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/event_names": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1Api"
                ],
                "summary": "Get event names for the given project id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"event_names\": map[string][]string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/goals": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Get All the saved goals for a given project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.FactorsGoal"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Create a saved goal with specified name and rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CreateFactorsGoalParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/goals/remove": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Remove a saved goal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Remove",
                        "name": "remove",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.RemoveFactorsGoalParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/goals/search": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Search on saved goals",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Search",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.SearchFactorsGoalParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.FactorsGoal"
                            }
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/goals/update": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Update a saved goal with specified name and rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.UpdateFactorsGoalParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/tracked_event": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Get all tracked events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.FactorsTrackedEvent"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Create a tracked event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "create",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CreateFactorsTrackedEventParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/tracked_event/remove": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Remove a tracked event",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "remove",
                        "name": "remove",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.RemoveFactorsTrackedEventParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/tracked_user_property": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Get all tracked user properties",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.FactorsTrackedUserProperty"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Create a tracked user property",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "create",
                        "name": "create",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CreateTrackeduserPropertyParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/factors/tracked_user_property/remove": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1FactorsApi"
                ],
                "summary": "Remove a tracked user property",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "remove",
                        "name": "remove",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.RemoveFactorsTrackedUserPropertyParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"id\": uint64, \"status\": string}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/{project_id}/v1/query": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "V1Api"
                ],
                "summary": "To run events core query as a query group for user and event count.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard ID",
                        "name": "dashboard_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Dashboard Unit ID",
                        "name": "dashboard_unit_id",
                        "in": "query"
                    },
                    {
                        "description": "Query group",
                        "name": "query_group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QueryGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"result\": model.QueryResult, \"cache\": false, \"refreshed_at\": timestamp}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.API_FilterRequestPayload": {
            "type": "object",
            "properties": {
                "expr": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.API_FilterResponePayload": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "boolean"
                },
                "expr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                }
            }
        },
        "handler.AttributionRequestPayload": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "object",
                    "$ref": "#/definitions/model.AttributionQuery"
                }
            }
        },
        "handler.DashboardRequestPayload": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handler.DashboardUnitWebAnalyticsCustomGroupQuery": {
            "type": "object",
            "properties": {
                "gbp": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unit_id": {
                    "type": "integer"
                }
            }
        },
        "handler.DashboardUnitWebAnalyticsQueryName": {
            "type": "object",
            "properties": {
                "query_name": {
                    "type": "string"
                },
                "unit_id": {
                    "type": "integer"
                }
            }
        },
        "handler.DashboardUnitsWebAnalyticsQuery": {
            "type": "object",
            "properties": {
                "custom_group_units": {
                    "description": "CustomGroupUnits - Customize query with group by properties and metrics.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.DashboardUnitWebAnalyticsCustomGroupQuery"
                    }
                },
                "from": {
                    "type": "integer"
                },
                "to": {
                    "type": "integer"
                },
                "units": {
                    "description": "Units - Supports redundant metric keys with different unit_ids.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.DashboardUnitWebAnalyticsQueryName"
                    }
                }
            }
        },
        "handler.QueryRequestPayload": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "object",
                    "$ref": "#/definitions/model.Query"
                }
            }
        },
        "handler.SavedQueryRequestPayload": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "handler.SavedQueryUpdatePayload": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                }
            }
        },
        "handler.agentInviteParams": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                }
            }
        },
        "handler.removeProjectAgentParams": {
            "type": "object",
            "required": [
                "agent_uuid"
            ],
            "properties": {
                "agent_uuid": {
                    "type": "string"
                }
            }
        },
        "handler.updateProjectAgentParams": {
            "type": "object",
            "required": [
                "agent_uuid"
            ],
            "properties": {
                "agent_uuid": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                }
            }
        },
        "model.AttributionQuery": {
            "type": "object",
            "properties": {
                "attribution_key": {
                    "type": "string"
                },
                "attribution_methodology": {
                    "type": "string"
                },
                "ce": {
                    "type": "object",
                    "$ref": "#/definitions/model.QueryEventWithProperties"
                },
                "cm": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "from": {
                    "type": "integer"
                },
                "lbw": {
                    "type": "integer"
                },
                "lfe": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QueryEventWithProperties"
                    }
                },
                "to": {
                    "type": "integer"
                }
            }
        },
        "model.ChannelQuery": {
            "type": "object",
            "properties": {
                "breakdown": {
                    "type": "string"
                },
                "channel": {
                    "type": "string"
                },
                "filter_key": {
                    "type": "string"
                },
                "filter_value": {
                    "type": "string"
                },
                "from": {
                    "description": "unix timestamp",
                    "type": "integer"
                },
                "match_type": {
                    "description": "optional",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "to": {
                    "description": "unix timestamp",
                    "type": "integer"
                }
            }
        },
        "model.Dashboard": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "Composite primary key, id + project_id + agent_id.",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "description": "Foreign key dashboards(project_id) ref projects(id).",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "units_position": {
                    "description": "map[string]map[uint64]int -\u003e map[unit_type]unit_id:unit_position",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.DashboardUnit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dashboard_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "Composite primary key, id + project_id.",
                    "type": "integer"
                },
                "presentation": {
                    "type": "string"
                },
                "project_id": {
                    "description": "Foreign key dashboard_units(project_id) ref projects(id).",
                    "type": "integer"
                },
                "query": {
                    "description": "TODO (Anil) remove this field once we move to saved queries",
                    "type": "string"
                },
                "query_id": {
                    "type": "integer"
                },
                "settings": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.DashboardUnitRequestPayload": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "presentation": {
                    "type": "string"
                },
                "query": {
                    "description": "TODO (Anil) remove this field once we move to saved queries",
                    "type": "string"
                },
                "query_id": {
                    "type": "integer"
                },
                "settings": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.FactorsGoal": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_tracked_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "rule": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.FactorsGoalFilter": {
            "type": "object",
            "properties": {
                "en_en_ft": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.KeyValueTuple"
                    }
                },
                "en_us_ft": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.KeyValueTuple"
                    }
                },
                "ft": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.KeyValueTuple"
                    }
                },
                "st_en_ft": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.KeyValueTuple"
                    }
                },
                "st_us_ft": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.KeyValueTuple"
                    }
                }
            }
        },
        "model.FactorsGoalRule": {
            "type": "object",
            "properties": {
                "en_en": {
                    "type": "string"
                },
                "en_time": {
                    "type": "string"
                },
                "rule": {
                    "type": "object",
                    "$ref": "#/definitions/model.FactorsGoalFilter"
                },
                "st_en": {
                    "type": "string"
                },
                "st_time": {
                    "type": "string"
                },
                "vs": {
                    "type": "boolean"
                }
            }
        },
        "model.FactorsTrackedEvent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "event_name_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_tracked_at": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.FactorsTrackedUserProperty": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_tracked_at": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_property_name": {
                    "type": "string"
                }
            }
        },
        "model.KeyValueTuple": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "vl": {
                    "type": "string"
                }
            }
        },
        "model.Project": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "date_format": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "private_token": {
                    "description": "An index created on private_token.",
                    "type": "string"
                },
                "project_uri": {
                    "type": "string"
                },
                "time_format": {
                    "type": "string"
                },
                "time_zone": {
                    "type": "string"
                },
                "token": {
                    "description": "An index created on token.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.ProjectSetting": {
            "type": "object",
            "properties": {
                "archive_enabled": {
                    "description": "Archival related fields.",
                    "type": "boolean"
                },
                "auto_form_capture": {
                    "type": "boolean"
                },
                "auto_track": {
                    "description": "Using pointers to avoid update by default value.\nomit empty to avoid nil(filelds not updated) on resp json.",
                    "type": "boolean"
                },
                "bigquery_enabled": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "exclude_bot": {
                    "type": "boolean"
                },
                "int_adwords_customer_account_id": {
                    "type": "string"
                },
                "int_adwords_enabled_agent_uuid": {
                    "description": "Adwords integration settings.\nForeign key constraint int_adwords_enabled_agent_uuid -\u003e agents(uuid)\nTodo: Set int_adwords_enabled_agent_uuid, int_adwords_customer_account_id to NULL\nfor disabling adwords integration for the project.",
                    "type": "string"
                },
                "int_facebook_access_token": {
                    "type": "string"
                },
                "int_facebook_ad_account": {
                    "type": "string"
                },
                "int_facebook_agent_uuid": {
                    "type": "string"
                },
                "int_facebook_email": {
                    "description": "Facebook settings",
                    "type": "string"
                },
                "int_facebook_user_id": {
                    "type": "string"
                },
                "int_hubspot": {
                    "description": "Hubspot integration settings.",
                    "type": "boolean"
                },
                "int_hubspot_api_key": {
                    "type": "string"
                },
                "int_salesforce_enabled_agent_uuid": {
                    "description": "Salesforce settings",
                    "type": "string"
                },
                "int_segment": {
                    "description": "Segment integration settings.",
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Queries": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "description": "Composite primary key, id + project_id.",
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "project_id": {
                    "description": "Foreign key queries(project_id) ref projects(id).",
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Query": {
            "type": "object",
            "properties": {
                "cl": {
                    "type": "string"
                },
                "ec": {
                    "description": "all or any",
                    "type": "string"
                },
                "ewp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QueryEventWithProperties"
                    }
                },
                "fr": {
                    "type": "integer"
                },
                "gbp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QueryGroupByProperty"
                    }
                },
                "gbt": {
                    "type": "object"
                },
                "ovp": {
                    "description": "Deprecated: Keeping it for old dashboard units.",
                    "type": "boolean"
                },
                "see": {
                    "type": "integer"
                },
                "sse": {
                    "type": "integer"
                },
                "to": {
                    "type": "integer"
                },
                "ty": {
                    "type": "string"
                },
                "tz": {
                    "type": "string"
                }
            }
        },
        "model.QueryEventWithProperties": {
            "type": "object",
            "properties": {
                "na": {
                    "type": "string"
                },
                "pr": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.QueryProperty"
                    }
                }
            }
        },
        "model.QueryGroup": {
            "type": "object",
            "properties": {
                "query_group": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Query"
                    }
                }
            }
        },
        "model.QueryGroupByProperty": {
            "type": "object",
            "properties": {
                "en": {
                    "description": "Entity: user or event.",
                    "type": "string"
                },
                "ena": {
                    "description": "group by specific event name.",
                    "type": "string"
                },
                "eni": {
                    "type": "integer"
                },
                "grn": {
                    "description": "currently used only for datetime - year/month/week/day/hour",
                    "type": "string"
                },
                "in": {
                    "type": "integer"
                },
                "pr": {
                    "type": "string"
                },
                "pty": {
                    "description": "Property type categorical / numerical.",
                    "type": "string"
                }
            }
        },
        "model.QueryProperty": {
            "type": "object",
            "properties": {
                "en": {
                    "description": "Entity: user or event.",
                    "type": "string"
                },
                "lop": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "pr": {
                    "type": "string"
                },
                "ty": {
                    "description": "Type: categorical or numerical",
                    "type": "string"
                },
                "va": {
                    "type": "string"
                }
            }
        },
        "model.UpdatableDashboard": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "units_position": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "ampuserId": {
                    "type": "string"
                },
                "c_uid": {
                    "description": "UserId provided by the customer.\nAn unique index is creatd on ProjectId+UserId.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Composite primary key with project_id and random uuid.",
                    "type": "string"
                },
                "join_timestamp": {
                    "description": "unix epoch timestamp in seconds.",
                    "type": "integer"
                },
                "project_id": {
                    "description": "Below are the foreign key constraints added in creation script.\nproject_id -\u003e projects(id)",
                    "type": "integer"
                },
                "properties": {
                    "description": "Not part of table, but part of json. Stored in UserProperties table.",
                    "type": "string"
                },
                "properties_id": {
                    "type": "string"
                },
                "seg_aid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "pattern_service_wrapper.FactorGraphResults": {
            "type": "object",
            "properties": {
                "charts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pattern_service_wrapper.graphResult"
                    }
                }
            }
        },
        "pattern_service_wrapper.graphResult": {
            "type": "object",
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "explanations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header": {
                    "type": "string"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "x_label": {
                    "type": "string"
                },
                "y_label": {
                    "type": "string"
                }
            }
        },
        "v1.AgentInfoWithProjectMapping": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "invited_by": {
                    "type": "string"
                },
                "is_email_verified": {
                    "type": "boolean"
                },
                "last_logged_in": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "role": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "v1.CreateFactorsGoalParams": {
            "type": "object",
            "required": [
                "name",
                "rule"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "rule": {
                    "type": "object",
                    "$ref": "#/definitions/model.FactorsGoalRule"
                }
            }
        },
        "v1.CreateFactorsTrackedEventParams": {
            "type": "object",
            "required": [
                "event_name"
            ],
            "properties": {
                "event_name": {
                    "type": "string"
                }
            }
        },
        "v1.CreateTrackeduserPropertyParams": {
            "type": "object",
            "required": [
                "user_property_name"
            ],
            "properties": {
                "user_property_name": {
                    "type": "string"
                }
            }
        },
        "v1.RemoveFactorsGoalParams": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "v1.RemoveFactorsTrackedEventParams": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "v1.RemoveFactorsTrackedUserPropertyParams": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "v1.SearchFactorsGoalParams": {
            "type": "object",
            "required": [
                "search_text"
            ],
            "properties": {
                "search_text": {
                    "type": "string"
                }
            }
        },
        "v1.UpdateFactorsGoalParams": {
            "type": "object",
            "required": [
                "id",
                "name",
                "rule"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rule": {
                    "type": "object",
                    "$ref": "#/definitions/model.FactorsGoalRule"
                }
            }
        }
    }
}