package tests

import (
	"factors/model/model"
	"factors/model/store"
	U "factors/util"
	"fmt"
	"net/http"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestTaskRegistration(t *testing.T) {
	taskName1 := fmt.Sprintf("%v_%v_1", "task_event", U.TimeNowZ().Unix())
	_, code, message := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName1, "Source", model.Hourly, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	_, code, message = store.GetStore().RegisterTaskWithDefaultConfiguration(taskName1, "Source", model.Hourly, false)
	assert.Equal(t, http.StatusConflict, code)
	assert.Equal(t, "TaskName already exist", message)
	taskName2 := fmt.Sprintf("%v_%v_2", "task_event", U.TimeNowZ().Unix())
	_, code, message = store.GetStore().RegisterTaskWithDefaultConfiguration(taskName2, "Source", model.Daily, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	taskName3 := fmt.Sprintf("%v_%v_3", "task_event", U.TimeNowZ().Unix())
	_, code, message = store.GetStore().RegisterTaskWithDefaultConfiguration(taskName3, "Source", model.Weekly, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	taskName4 := fmt.Sprintf("%v_%v_4", "task_event", U.TimeNowZ().Unix())
	id4, code, message := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName4, "Source", model.Stateless, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	_, code, message = store.GetStore().RegisterTask(taskName1, "Source", model.Hourly, false, 5, 1, 4, true, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "incorrect frequency parameters", message)
	taskDetails, code, message := store.GetStore().GetTaskDetailsByName(taskName4)
	assert.Equal(t, id4, taskDetails.TaskID)
	taskDetails, code, message = store.GetStore().GetTaskDetailsById(id4)
	assert.Equal(t, taskName4, taskDetails.TaskName)
}

func TestTaskExecutionInsert(t *testing.T) {
	// Hourly
	taskName := fmt.Sprintf("%v_%v", "task_event", U.TimeNowZ().Unix())
	id, code, message := store.GetStore().RegisterTask(taskName, "Source", model.Hourly, false, 1, 1, 20, true, 15)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskBeginRecord(id, 0, 2021040100)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskEndRecord(id, 0, 2021040100)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskEndRecord(id, 0, 2021040101)
	assert.Equal(t, http.StatusInternalServerError, code)
	assert.Equal(t, "No such record found", message)
	code, message = store.GetStore().InsertTaskBeginRecord(id, 0, 2021040100)
	assert.Equal(t, http.StatusConflict, code)
	assert.Equal(t, "Trying to insert duplicate record", message)
	code, message = store.GetStore().InsertTaskBeginRecord(id, 0, 2021040101)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskBeginRecord(id, 0, 2021040102)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskEndRecord(id, 0, 2021040102)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskBeginRecord(id, 0, 2021033102)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().InsertTaskEndRecord(id, 0, 2021033102)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	endDate := time.Date(2021, 4, 2, 0, 0, 0, 0, time.UTC)
	deltas, _, _ := store.GetStore().GetAllDeltasByConfiguration(id, 1, &endDate)
	assert.Equal(t, deltas[0], uint64(2021040101))
	assert.Equal(t, deltas[19], uint64(2021040120))
	assert.Equal(t, len(deltas), 20)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id, 0, 1, &endDate)
	assert.Equal(t, deltas[0], uint64(2021040103))
	assert.Equal(t, deltas[17], uint64(2021040120))
	assert.Equal(t, len(deltas), 18)
	endDate = time.Date(2021, 4, 2, 2, 0, 0, 0, time.UTC)
	deltas, _, _ = store.GetStore().GetAllDeltasByConfiguration(id, 1, &endDate)
	assert.Equal(t, deltas[0], uint64(2021040102))
	assert.Equal(t, deltas[19], uint64(2021040201))
	assert.Equal(t, len(deltas), 21)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id, 0, 1, &endDate)
	assert.Equal(t, deltas[0], uint64(2021040103))
	assert.Equal(t, deltas[18], uint64(2021040201))
	assert.Equal(t, len(deltas), 19)
	endDate = time.Date(2021, 4, 2, 0, 0, 0, 0, time.UTC)
	processedIntervals, _, _ := store.GetStore().GetAllProcessedIntervals(id, 0, 10, &endDate)
	assert.Equal(t, len(processedIntervals), 3)
	processedIntervals, _, _ = store.GetStore().GetAllProcessedIntervals(id, 0, 1, &endDate)
	assert.Equal(t, len(processedIntervals), 2)

	//Daily
	taskNameDaily := fmt.Sprintf("%v_%v", "task_event_daily", U.TimeNowZ().Unix())
	id, code, message = store.GetStore().RegisterTask(taskNameDaily, "Source", model.Daily, false, 1, 0, 4, true, 150)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	endDate = time.Date(2021, 4, 5, 0, 0, 0, 0, time.UTC)
	deltas, _, _ = store.GetStore().GetAllDeltasByConfiguration(id, 13, &endDate)
	assert.Equal(t, deltas[0], uint64(2021032300))
	assert.Equal(t, deltas[7], uint64(2021040100))
	assert.Equal(t, deltas[8], uint64(2021040400))
	assert.Equal(t, len(deltas), 10)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id, 0, 13, &endDate)
	assert.Equal(t, deltas[0], uint64(2021032300))
	assert.Equal(t, deltas[7], uint64(2021040100))
	assert.Equal(t, deltas[8], uint64(2021040400))
	assert.Equal(t, len(deltas), 9)
	endDate = time.Date(2021, 4, 5, 2, 0, 0, 0, time.UTC)
	deltas, _, _ = store.GetStore().GetAllDeltasByConfiguration(id, 13, &endDate)
	assert.Equal(t, deltas[0], uint64(2021032300))
	assert.Equal(t, deltas[7], uint64(2021040100))
	assert.Equal(t, deltas[8], uint64(2021040400))
	assert.Equal(t, len(deltas), 10)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id, 0, 13, &endDate)
	assert.Equal(t, deltas[0], uint64(2021032400))
	assert.Equal(t, deltas[6], uint64(2021040100))
	assert.Equal(t, deltas[7], uint64(2021040400))
	assert.Equal(t, len(deltas), 8)

	// Weekly
	taskNameWeekly := fmt.Sprintf("%v_%v", "task_event_week", U.TimeNowZ().Unix())
	id, code, message = store.GetStore().RegisterTask(taskNameWeekly, "Source", model.Weekly, false, 1, 0, -1, true, 0)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	endDate = time.Date(2021, 4, 2, 0, 0, 0, 0, time.UTC)
	deltas, _, _ = store.GetStore().GetAllDeltasByConfiguration(id, 30, &endDate)
	assert.Equal(t, deltas[0], uint64(2021022800))
	assert.Equal(t, deltas[3], uint64(2021032100))
	assert.Equal(t, deltas[4], uint64(2021032800))
	endDate = time.Date(2021, 3, 28, 2, 0, 0, 0, time.UTC)
	deltas, _, _ = store.GetStore().GetAllDeltasByConfiguration(id, 30, &endDate)
	assert.Equal(t, deltas[0], uint64(2021022100))
	assert.Equal(t, deltas[3], uint64(2021031400))
	assert.Equal(t, deltas[4], uint64(2021032100))
	assert.Equal(t, deltas[5], uint64(2021032800))
}

func TestCircularDependency(t *testing.T) {
	taskName1 := fmt.Sprintf("%v_%v", "a", U.TimeNowZ().Unix())
	taskName2 := fmt.Sprintf("%v_%v", "b", U.TimeNowZ().Unix())
	taskName3 := fmt.Sprintf("%v_%v", "c", U.TimeNowZ().Unix())
	taskName4 := fmt.Sprintf("%v_%v", "d", U.TimeNowZ().Unix())
	taskName5 := fmt.Sprintf("%v_%v", "e", U.TimeNowZ().Unix())
	a, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName1, "Source", model.Hourly, false)
	b, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName2, "Source", model.Hourly, false)
	c, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName3, "Source", model.Hourly, false)
	d, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName4, "Source", model.Hourly, false)
	e, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName5, "Source", model.Hourly, false)
	code, message := store.GetStore().RegisterTaskDependency(a, e, 0)
	assert.Equal(t, http.StatusCreated, code)
	code, message = store.GetStore().RegisterTaskDependency(b, a, 0)
	assert.Equal(t, http.StatusCreated, code)
	code, message = store.GetStore().RegisterTaskDependency(c, b, 0)
	assert.Equal(t, http.StatusCreated, code)
	code, message = store.GetStore().RegisterTaskDependency(d, c, 0)
	assert.Equal(t, http.StatusCreated, code)
	code, message = store.GetStore().RegisterTaskDependency(e, d, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "Circular Dependency detected", message)

	taskName6 := fmt.Sprintf("%v_%v", "f", U.TimeNowZ().Unix())
	taskName7 := fmt.Sprintf("%v_%v", "g", U.TimeNowZ().Unix())
	f, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName6, "Source", model.Hourly, false)
	g, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName7, "Source", model.Hourly, false)
	code, message = store.GetStore().RegisterTaskDependency(f, g, 0)
	assert.Equal(t, http.StatusCreated, code)
	code, message = store.GetStore().RegisterTaskDependency(g, f, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "Circular Dependency detected", message)
}

func TestTaskDependencyInsertDelete(t *testing.T) {
	// Test dependency register-deregister
	taskName1 := fmt.Sprintf("%v_%v", "task_event1_dep", U.TimeNowZ().Unix())
	id1, code, message := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName1, "Source", model.Hourly, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	taskName2 := fmt.Sprintf("%v_%v", "task_event2_dep", U.TimeNowZ().Unix())
	id2, code, message := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName2, "Source", model.Daily, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().RegisterTaskDependency(id2, id1, 0)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().RegisterTaskDependency(id2, id1, 0)
	assert.Equal(t, http.StatusConflict, code)
	assert.Equal(t, "TaskName-Dependency already exist", message)
	code, message = store.GetStore().RegisterTaskDependency(id1, id2, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "BaseTask is more frequent than the dependent task", message)
	code, message = store.GetStore().DeregisterTaskDependency(id2, id1)
	assert.Equal(t, http.StatusAccepted, code)
	assert.Equal(t, "", message)
	code, message = store.GetStore().DeregisterTaskDependency(id1, id2)
	assert.Equal(t, http.StatusNotFound, code)
	assert.Equal(t, "Record not found", message)
	code, message = store.GetStore().RegisterTaskDependency(id2+1, id1, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "Invalid taskID", message)
	code, message = store.GetStore().RegisterTaskDependency(id2, id2+1, 0)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "Invalid taskID", message)

	// Test delta calculation
	taskName3 := fmt.Sprintf("%v_%v", "task_event3_dep", U.TimeNowZ().Unix())
	id3, code, message := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName3, "Source", model.Weekly, false)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	deltas, _, _ := store.GetStore().GetAllToBeExecutedDeltas(id1, 0, 2, nil)
	assert.Equal(t, len(deltas), 49)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id2, 0, 2, nil)
	assert.Equal(t, len(deltas), 2)
	deltas, _, _ = store.GetStore().GetAllToBeExecutedDeltas(id3, 0, 8, nil)
	if U.TimeNowZ().Weekday() == 0 {
		assert.Equal(t, len(deltas), 2)
	} else {
		assert.Equal(t, len(deltas), 1)
	}

	// Test dependent event calculation
	code, message = store.GetStore().RegisterTaskDependency(id2, id1, 0)
	assert.Equal(t, http.StatusCreated, code)
	assert.Equal(t, "", message)
	depIds, _, _ := store.GetStore().GetAllDependentTasks(id2)
	assert.Equal(t, depIds[0].DependentTaskID, id1)
}

func TestIsDependentTaskDone(t *testing.T) {
	// Hour -> Hour
	taskName1 := fmt.Sprintf("%v_%v", "task_event1", U.TimeNowZ().Unix())
	id1, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName1, "Source", model.Hourly, false)
	taskName2 := fmt.Sprintf("%v_%v", "task_event2", U.TimeNowZ().Unix())
	id2, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName2, "Source", model.Hourly, false)
	store.GetStore().RegisterTaskDependency(id2, id1, 0)
	isDone := store.GetStore().IsDependentTaskDone(id2, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id1, 0, 2021040100)
	isDone = store.GetStore().IsDependentTaskDone(id2, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskEndRecord(id1, 0, 2021040100)
	isDone = store.GetStore().IsDependentTaskDone(id2, 0, 2021040100)
	assert.Equal(t, isDone, true)
	store.GetStore().DeregisterTaskDependency(id2, id1)
	store.GetStore().RegisterTaskDependency(id2, id1, -2)
	isDone = store.GetStore().IsDependentTaskDone(id2, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id1, 0, 2021033122)
	store.GetStore().InsertTaskEndRecord(id1, 0, 2021033122)
	isDone = store.GetStore().IsDependentTaskDone(id2, 0, 2021040100)
	assert.Equal(t, isDone, true)

	// daily daily
	taskName3 := fmt.Sprintf("%v_%v", "task_event3", U.TimeNowZ().Unix())
	id3, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName3, "Source", model.Daily, false)
	taskName4 := fmt.Sprintf("%v_%v", "task_event4", U.TimeNowZ().Unix())
	id4, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName4, "Source", model.Daily, false)
	store.GetStore().RegisterTaskDependency(id4, id3, 0)
	isDone = store.GetStore().IsDependentTaskDone(id4, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id3, 0, 2021040100)
	isDone = store.GetStore().IsDependentTaskDone(id4, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskEndRecord(id3, 0, 2021040100)
	isDone = store.GetStore().IsDependentTaskDone(id4, 0, 2021040100)
	assert.Equal(t, isDone, true)
	store.GetStore().DeregisterTaskDependency(id4, id3)
	store.GetStore().RegisterTaskDependency(id4, id3, -2)
	isDone = store.GetStore().IsDependentTaskDone(id4, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id3, 0, 2021033000)
	store.GetStore().InsertTaskEndRecord(id3, 0, 2021033000)
	isDone = store.GetStore().IsDependentTaskDone(id4, 0, 2021040100)
	assert.Equal(t, isDone, true)

	// Weekly Weekly
	taskName5 := fmt.Sprintf("%v_%v", "task_event5", U.TimeNowZ().Unix())
	id5, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName5, "Source", model.Weekly, false)
	taskName6 := fmt.Sprintf("%v_%v", "task_event6", U.TimeNowZ().Unix())
	id6, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName6, "Source", model.Weekly, false)
	store.GetStore().RegisterTaskDependency(id6, id5, 0)
	isDone = store.GetStore().IsDependentTaskDone(id6, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id5, 0, 2021042500)
	isDone = store.GetStore().IsDependentTaskDone(id6, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskEndRecord(id5, 0, 2021042500)
	isDone = store.GetStore().IsDependentTaskDone(id6, 0, 2021042500)
	assert.Equal(t, isDone, true)
	store.GetStore().DeregisterTaskDependency(id6, id5)
	store.GetStore().RegisterTaskDependency(id6, id5, -2)
	isDone = store.GetStore().IsDependentTaskDone(id6, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id5, 0, 2021041100)
	store.GetStore().InsertTaskEndRecord(id5, 0, 2021041100)
	isDone = store.GetStore().IsDependentTaskDone(id6, 0, 2021042500)
	assert.Equal(t, isDone, true)

	// hour - daily
	taskName7 := fmt.Sprintf("%v_%v", "task_event7", U.TimeNowZ().Unix())
	id7, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName7, "Source", model.Hourly, false)
	taskName8 := fmt.Sprintf("%v_%v", "task_event8", U.TimeNowZ().Unix())
	id8, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName8, "Source", model.Daily, false)
	store.GetStore().RegisterTaskDependency(id8, id7, 0)
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, false)
	delta := uint64(2021040100)
	for i := uint64(0); i <= uint64(23); i++ {
		store.GetStore().InsertTaskBeginRecord(id7, 0, delta+i)
		store.GetStore().InsertTaskEndRecord(id7, 0, delta+i)
	}
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, true)
	store.GetStore().DeleteTaskEndRecord(id7, 0, 2021040100)
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id7, 0, 2021040100)
	store.GetStore().InsertTaskEndRecord(id7, 0, 2021040100)
	store.GetStore().DeleteTaskEndRecord(id7, 0, 2021040123)
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id7, 0, 2021040123)
	store.GetStore().InsertTaskEndRecord(id7, 0, 2021040123)
	store.GetStore().DeleteTaskEndRecord(id7, 0, 2021040117)
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, false)

	store.GetStore().DeregisterTaskDependency(id8, id7)
	store.GetStore().RegisterTaskDependency(id8, id7, -2)
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, false)
	delta = uint64(2021033000)
	for i := uint64(0); i <= uint64(23); i++ {
		store.GetStore().InsertTaskBeginRecord(id7, 0, delta+i)
		store.GetStore().InsertTaskEndRecord(id7, 0, delta+i)
	}
	isDone = store.GetStore().IsDependentTaskDone(id8, 0, 2021040100)
	assert.Equal(t, isDone, true)

	// hour - weekly
	taskName9 := fmt.Sprintf("%v_%v", "task_event9", U.TimeNowZ().Unix())
	id9, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName9, "Source", model.Hourly, false)
	taskName10 := fmt.Sprintf("%v_%v", "task_event10", U.TimeNowZ().Unix())
	id10, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName10, "Source", model.Weekly, false)
	store.GetStore().RegisterTaskDependency(id10, id9, 0)
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, false)
	deltaTime := getDeltaAsTime(uint64(2021042500))
	for i := uint64(0); i <= uint64(24*7)-1; i++ {
		store.GetStore().InsertTaskBeginRecord(id9, 0, U.DateAsFormattedInt(deltaTime.Add(time.Hour*time.Duration(i))))
		store.GetStore().InsertTaskEndRecord(id9, 0, U.DateAsFormattedInt(deltaTime.Add(time.Hour*time.Duration(i))))
	}
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, true)
	store.GetStore().DeleteTaskEndRecord(id9, 0, 2021042500)
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id9, 0, 2021042500)
	store.GetStore().InsertTaskEndRecord(id9, 0, 2021042500)
	store.GetStore().DeleteTaskEndRecord(id9, 0, 2021050123)
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id9, 0, 2021050123)
	store.GetStore().InsertTaskEndRecord(id9, 0, 2021050123)
	store.GetStore().DeleteTaskEndRecord(id9, 0, 2021042823)
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, false)

	store.GetStore().DeregisterTaskDependency(id10, id9)
	store.GetStore().RegisterTaskDependency(id10, id9, -1)
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, false)
	deltaTime = getDeltaAsTime(uint64(2021041800))
	for i := uint64(0); i <= uint64(24*7)-1; i++ {
		store.GetStore().InsertTaskBeginRecord(id9, 0, U.DateAsFormattedInt(deltaTime.Add(time.Hour*time.Duration(i))))
		store.GetStore().InsertTaskEndRecord(id9, 0, U.DateAsFormattedInt(deltaTime.Add(time.Hour*time.Duration(i))))
	}
	isDone = store.GetStore().IsDependentTaskDone(id10, 0, 2021042500)
	assert.Equal(t, isDone, true)

	// daily - weekly
	taskName11 := fmt.Sprintf("%v_%v", "task_event11", U.TimeNowZ().Unix())
	id11, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName11, "Source", model.Daily, false)
	taskName12 := fmt.Sprintf("%v_%v", "task_event12", U.TimeNowZ().Unix())
	id12, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName12, "Source", model.Weekly, false)
	store.GetStore().RegisterTaskDependency(id12, id11, 0)
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, false)
	deltaTime = getDeltaAsTime(uint64(2021042500))
	for i := int(0); i <= 6; i++ {
		store.GetStore().InsertTaskBeginRecord(id11, 0, U.DateAsFormattedInt(deltaTime.AddDate(0, 0, i)))
		store.GetStore().InsertTaskEndRecord(id11, 0, U.DateAsFormattedInt(deltaTime.AddDate(0, 0, i)))
	}
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, true)
	store.GetStore().DeleteTaskEndRecord(id11, 0, 2021042500)
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id11, 0, 2021042500)
	store.GetStore().InsertTaskEndRecord(id11, 0, 2021042500)
	store.GetStore().DeleteTaskEndRecord(id11, 0, 2021050100)
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id11, 0, 2021050100)
	store.GetStore().InsertTaskEndRecord(id11, 0, 2021050100)
	store.GetStore().DeleteTaskEndRecord(id11, 0, 2021042800)
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, false)

	store.GetStore().DeregisterTaskDependency(id12, id11)
	store.GetStore().RegisterTaskDependency(id12, id11, -1)
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, false)
	deltaTime = getDeltaAsTime(uint64(2021041800))
	for i := int(0); i <= 6; i++ {
		store.GetStore().InsertTaskBeginRecord(id11, 0, U.DateAsFormattedInt(deltaTime.AddDate(0, 0, i)))
		store.GetStore().InsertTaskEndRecord(id11, 0, U.DateAsFormattedInt(deltaTime.AddDate(0, 0, i)))
	}
	isDone = store.GetStore().IsDependentTaskDone(id12, 0, 2021042500)
	assert.Equal(t, isDone, true)

	// hourly - stateless
	taskName13 := fmt.Sprintf("%v_%v", "task_event13", U.TimeNowZ().Unix())
	id13, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName13, "Source", model.Stateless, false)
	taskName14 := fmt.Sprintf("%v_%v", "task_event14", U.TimeNowZ().Unix())
	id14, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName14, "Source", model.Hourly, false)
	taskName15 := fmt.Sprintf("%v_%v", "task_event15", U.TimeNowZ().Unix())
	id15, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName15, "Source", model.Daily, false)
	taskName16 := fmt.Sprintf("%v_%v", "task_event16", U.TimeNowZ().Unix())
	id16, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName16, "Source", model.Weekly, false)
	taskName17 := fmt.Sprintf("%v_%v", "task_event17", U.TimeNowZ().Unix())
	id17, _, _ := store.GetStore().RegisterTaskWithDefaultConfiguration(taskName17, "Source", model.Stateless, false)
	store.GetStore().RegisterTaskDependency(id14, id13, 0)
	isDone = store.GetStore().IsDependentTaskDone(id14, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021042500)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021042500)
	isDone = store.GetStore().IsDependentTaskDone(id14, 0, 2021042500)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021042600)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021042600)
	isDone = store.GetStore().IsDependentTaskDone(id14, 0, 2021042500)
	assert.Equal(t, isDone, true)

	// daily - stateless
	store.GetStore().RegisterTaskDependency(id15, id13, 0)
	isDone = store.GetStore().IsDependentTaskDone(id15, 0, 2021042700)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021042700)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021042700)
	isDone = store.GetStore().IsDependentTaskDone(id15, 0, 2021042700)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021042800)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021042800)
	isDone = store.GetStore().IsDependentTaskDone(id15, 0, 2021042700)
	assert.Equal(t, isDone, true)

	// weekly - stateless
	store.GetStore().RegisterTaskDependency(id16, id13, 0)
	isDone = store.GetStore().IsDependentTaskDone(id16, 0, 2021042900)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021042900)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021042900)
	isDone = store.GetStore().IsDependentTaskDone(id16, 0, 2021042900)
	assert.Equal(t, isDone, false)
	store.GetStore().InsertTaskBeginRecord(id13, 0, 2021043000)
	store.GetStore().InsertTaskEndRecord(id13, 0, 2021043000)
	isDone = store.GetStore().IsDependentTaskDone(id16, 0, 2021042900)
	assert.Equal(t, isDone, true)

	// stateless - stateless
	code, msg := store.GetStore().RegisterTaskDependency(id17, id13, 0)
	assert.Equal(t, msg, "BaseTask is stateless - so it cannot depend of any task")
	assert.Equal(t, code, http.StatusBadRequest)
}

func getDeltaAsTime(delta uint64) time.Time {
	hours := delta % 100
	datePart := fmt.Sprintf("%v", delta/100)
	deltaDate, _ := time.Parse(U.DATETIME_FORMAT_YYYYMMDD, datePart)
	deltaDate = deltaDate.Add(time.Hour * time.Duration(hours))
	return deltaDate
}
