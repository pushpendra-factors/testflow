package disk

import (
	"bytes"
	U "factors/util"
	"fmt"
	"io/ioutil"
	"os"
	"testing"

	log "github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
)

var (
	diskDriver *DiskDriver
	baseDir    = "/tmp/factors-disk-test"
)

func cleanupDir(dir string) error {
	log.Infof("Removing Dir %s\n", dir)
	err := os.RemoveAll(dir)
	if err != nil {
		log.WithError(err).Errorf("Failed to remove dir %s", dir)
	}
	return err
}

func cleanup() {
	dirs := []string{baseDir}
	for _, dir := range dirs {
		cleanupDir(dir)
	}
}

func TestMain(m *testing.M) {

	diskDriver = New(baseDir)
	log.SetLevel(log.DebugLevel)
	log.Infof("Using baseDir %s", baseDir)

	statusCode := m.Run()

	cleanup()

	os.Exit(statusCode)
}

func TestGetProjectModelDir(t *testing.T) {
	projectId := U.RandomUint64()
	modelId := U.RandomUint64()

	result := diskDriver.GetProjectModelDir(projectId, modelId)
	expected := fmt.Sprintf("%s/projects/%d/models/%d/", baseDir, projectId, modelId)
	assert.Equal(t, expected, result)
}

func TestGetModelEventInfoFilePath(t *testing.T) {
	projectId := U.RandomUint64()
	modelId := U.RandomUint64()

	resultPath, resultName := diskDriver.GetModelEventInfoFilePathAndName(projectId, modelId)
	expectedPath := diskDriver.GetProjectModelDir(projectId, modelId)
	expectedName := fmt.Sprintf("event_info_%d.txt", modelId)

	assert.Equal(t, expectedPath, resultPath)
	assert.Equal(t, expectedName, resultName)
}

func TestGetModelEventsFilePath(t *testing.T) {
	projectId := U.RandomUint64()
	modelId := U.RandomUint64()

	resultPath, resultName := diskDriver.GetModelEventsFilePathAndName(projectId, modelId)
	expectedPath := diskDriver.GetProjectModelDir(projectId, modelId)
	expectedName := fmt.Sprintf("events_%d.txt", modelId)

	assert.Equal(t, expectedPath, resultPath)
	assert.Equal(t, expectedName, resultName)
}

func TestGetPatternChunkFilePathAndName(t *testing.T) {
	projectId := U.RandomUint64()
	modelId := U.RandomUint64()
	chunkId := U.RandomString(8)
	expectedPath := diskDriver.GetProjectModelDir(projectId, modelId) + "chunks/"
	expectedName := fmt.Sprintf("chunk_%s.txt", chunkId)

	resultPath, resultName := diskDriver.GetPatternChunkFilePathAndName(projectId, modelId, chunkId)

	assert.Equal(t, expectedPath, resultPath)
	assert.Equal(t, expectedName, resultName)
}

func TestCreate(t *testing.T) {
	t.Run("CreateNewFile", func(t *testing.T) {
		strToWrite := "This is a random string\n"
		randomFileContent := bytes.NewReader([]byte(strToWrite))
		fileName := U.RandomString(8) + ".txt"
		randomPath := baseDir
		err := diskDriver.Create(randomPath, fileName, randomFileContent)
		assert.Nil(t, err)
	})
}

func TestGetFile(t *testing.T) {
	t.Run("GetNonExistingFile", func(t *testing.T) {
		randomPath := baseDir + "/" + U.RandomString(8)
		randomFileName := U.RandomString(8) + ".txt"
		_, err := diskDriver.Get(randomPath, randomFileName)
		assert.True(t, os.IsNotExist(err))
	})

	t.Run("CreateAndGet", func(t *testing.T) {
		strToWrite := "This is a random autogenerated string " + U.RandomString(100)
		randomFileContent := bytes.NewReader([]byte(strToWrite))
		fileName := U.RandomString(8) + ".txt"
		randomPath := baseDir + "/" + U.RandomString(8) + "/"
		err := diskDriver.Create(randomPath, fileName, randomFileContent)
		assert.Nil(t, err)

		reader, err := diskDriver.Get(randomPath, fileName)
		assert.Nil(t, err)
		fileBytes, err := ioutil.ReadAll(reader)
		assert.Nil(t, err)
		readString := string(fileBytes)
		assert.Equal(t, strToWrite, readString)
	})

}
