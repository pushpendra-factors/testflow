{{define "navigation"}}
<li class="active"><a href="#"><span>Insights</span> <i class="icon-rulers"></i></a></li>
{{end}}

{{define "title"}}
<h1>Insights <small>User paths</small></h1>
{{end}}

{{define "content"}}
<div class="row">
    <div class="col-md-12">

        <div class="panel panel-default">
            <div class="panel-heading"><h6 class="panel-title">Select events</h6></div>
            <div class="panel-body">
                <div class="create-funnel">
                    <table>
                        <tbody id="rules-input">
                        </tbody>
                    </table>
                </div>

                <div class="message-controls">
                    <button type="button" class="btn btn-action btn-single" onclick='queryPatterns()'>Paths</button>
                    <button type="button" class="btn btn-action btn-single" onclick='crunchPatterns()'>Crunch</button>
                </div>
            </div>
        </div>


    </div>

    <div class="col-md-12">
        <div id="result-col" style="display: none;" class="panel panel-default">
            <div class="panel-heading"><h6 class="panel-title">Results</h6></div>
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody id="funnel-output">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{{end}}

{{define "script"}}
<script>

	function queryPatterns() {
		var startEvent = $('#rules-input').find('#start-options').val();
		var endEvent = $('#rules-input').find('#end-options').val();
		var url = "/projects/" + globalCurrentProjectId + "/patterns/query";
		if (startEvent == "[None]") {
			startEvent = ""
		}
		if (endEvent == "[None]") {
			endEvent = ""
		}

		httpAjax({
            method: "POST",
            url: url,
			data: {"start_event": startEvent, "end_event": endEvent},
            success: function(response) {
                populateResults(response);
            },
        });
    }

    function crunchPatterns() {
		var endEvent = $('#rules-input').find('#end-options').val();
		if (endEvent == "[None]") {
			endEvent = ""
		}
		var url = "/projects/" + globalCurrentProjectId + "/patterns/crunch";

		httpAjax({
            method: "POST",
            url: url,
			data: {"end_event": endEvent},
            success: function(response) {
                populateResults(response);
            },
        });
    }

    function stringify(data) {
        if(typeof data === "string") {
            return data;
        }
        return window.Prototype ? Object.toJSON(data) : JSON.stringify(data);
    }

    function httpAjax(params) {
        params.beforeSend = function(xhr) {
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        };

        var xhr = new(window.XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');
        xhr.open(params.method, params.url);
        params.beforeSend(xhr);
        xhr.onerror = params.onerror || function (e) {console.error(e);};
        xhr.onreadystatechange = function (e) {
            if (xhr.readyState === 4) {
                var okComplete = (xhr.status === 200 || xhr.status === 201);
                if(okComplete && typeof (params.success || params.statusCode[xhr.status]) === "function") {
                    (params.success || params.statusCode[xhr.status])(xhr.responseText);
                } else {
                    xhr.onerror.call();
                }
            }
        };
        xhr.send(!!params.data ? stringify(params.data) : null);
    }

	function populateResults(response) {
        resp = JSON.parse(response);
        $('#funnel-output').empty();
        console.log(resp);
        if(resp && resp.length > 0){
            var row = ""
            var graphSize = 160;
            console.log('No.of Patterns : '+ resp.length)
            for(var i=0, len=resp.length; i < len; i++) {
				var pLen = resp[i]['event_names'].length;
				var totalUserCount = resp[i]['total_user_count'];
				var perUserCount = resp[i]['per_user_counts'][pLen - 1]
                var probability = (perUserCount/totalUserCount).toFixed(4);
                var resultString = 'Sequence Match ( ' + perUserCount + ' ) / Total ( ' + totalUserCount + ' )'
                resultString += ' = '+ probability;
                var funnelSvg = funnelGraphSvg(resp[i], graphSize);
                row += '<div class="calc-result"><span>'+resultString+'</span></div>'
                row += '<div class="svg-graph">' + funnelSvg + '</div>';
            }
            $('#result-col').show();
            var eventRow = $(row);
            $('#funnel-output').append(eventRow);
        }
    }

    function initRows(events) {
        if (!events || events.length == 0) {
            return;
        }

        var row = `
        <tr class='event-row' style="display:none;">
            <td class="text-center">
                <select data-placeholder="Choose an event..." id="start-options" tabindex="2">`
		row +="<option value='[None]'>[None]</option>";
        for (var eventid in events) {
            if (events.hasOwnProperty(eventid)) {
                // console.log(eventid)
                row +="<option value='" + events[eventid] + "'>" + events[eventid] + "</option>";
            }
        }
        row += `
                </select>
            </td>
        </tr>
        `
        row += `
        <tr class='event-row'>
            <td class="text-center">
                <select data-placeholder="Choose an event..." id="end-options" tabindex="2">`
		row +="<option value='[None]'>[None]</option>";
        for (var eventid in events) {
            if (events.hasOwnProperty(eventid)) {
                // console.log(eventid)
                row +="<option value='" + events[eventid] + "'>" + events[eventid] + "</option>";
            }
        }
        row += `
                </select>
            </td>
        </tr>
        `
        return row
    }

	function timeFormat(time) {   
    	// Hours, minutes and seconds
		time = Math.floor(time)
    	var hrs = ~~(time / 3600);
    	var mins = ~~((time % 3600) / 60);
    	var secs = time % 60;

    	// Output like "1:01" or "4:03:59" or "123:03:59"
    	var ret = "";

    	if (hrs > 0) {
    	    ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
    	}

    	ret += "" + mins + ":" + (secs < 10 ? "0" : "");
    	ret += "" + secs;
    	return ret;
	}

    function arrowSvg(previousNum, currentNum, meanTiming, meanRepeats, meanCardinality, graphSize) {
		console.log(meanTiming);
        var arrowWidth = Math.floor(graphSize / 1.2);
        var arrowVerticalCentre = Math.ceil(graphSize / 2.77);
        var conversionPercent = Math.floor(currentNum * 100 / previousNum);
        var colorCodes = ["#FF0000", "#FF3400", "#FF6900", "#FF9E00", "#FFD300",
                          "#F7FF00", "#C2FF00", "#8DFF00", "#58FF00", "#24FF00",
						   "#24FF00"];
        var arrowColor = colorCodes[Math.floor(conversionPercent / 10.0)];
        var textFont = Math.floor(graphSize / 15);
        var arrowDivId = "arrow-" + Math.floor(Math.random() * 10000);
        var svg = '<svg width="' + arrowWidth + '" height="' + graphSize + '">' +
                      '<defs>' +
                          '<marker id="' + arrowDivId + '" markerWidth="10" markerHeight="10" refX="0" refY="3" orient="auto" markerUnits="strokeWidth" viewBox="0 0 20 20">' +
                              '<path d="M0,0 L0,6 L9,3 z" fill="' + arrowColor + '" />' +
                          '</marker>' +
                      '</defs>' +
                      '<text x="20" y="' + (arrowVerticalCentre - 15) + '" font-size="' + textFont + '">' + conversionPercent + '% (' + timeFormat(meanTiming) + ')</text>' +
                      '<line x1="10" y1="' + arrowVerticalCentre + '" x2="60" y2="' + arrowVerticalCentre + '" stroke="' + arrowColor + '" stroke-width="5" marker-end="url(#' + arrowDivId + ')" />' +
					   '<text x="30" y="' + (arrowVerticalCentre + 20) + '" font-size="' + textFont + '">(' + meanRepeats + ' times)</text>' +
                  '</svg>';
        return svg;
    }

    function nodeSvg(eventName, num, maxNum, color, graphSize) {
        var numFontSize = Math.floor(graphSize / 10);
        var eventFontSize = Math.floor(numFontSize * 0.65);
        var maxCircleWidth = Math.ceil(graphSize * 5.0 / 6.0);
        var maxCircleRadius = Math.floor(maxCircleWidth / 3);
        var reductionFactor = num / maxNum;
        var circleWidth = Math.floor(maxCircleWidth * reductionFactor);
        var circleRadius = Math.floor(maxCircleRadius * reductionFactor);
        var svgWidth = Math.max(Math.ceil(eventName.length * graphSize / 30), circleWidth);
        var horizontalCentre = Math.floor(svgWidth / 2);
        var circleVerticalCentre = Math.ceil(graphSize / 2.77);
        var eventVerticalCentre = Math.floor(graphSize / 1.24);
        var numVerticalCentre = Math.ceil(graphSize / 1.03);
        var svg = '<svg width="' + svgWidth + '" height="' + graphSize + '">' +
                     '<circle cx="' + horizontalCentre + '" cy="' + circleVerticalCentre + '" r="' + circleRadius + '" fill="' + color + '"/>' +
                     '<text text-anchor="middle" x="' + horizontalCentre + '" y="' + eventVerticalCentre + '" font-size="' + eventFontSize + '">' + eventName + '</text>' +
                     '<text text-anchor="middle" x="' + horizontalCentre + '" y="' + numVerticalCentre + '" font-size="' + numFontSize + '">(' + num + ')</text>' +
                   '</svg>';
        return svg;
    }
	
	function funnelGraphSvg(funnel, graphSize) {
        if (!funnel) {
            return "";
        }
        var maxNum = funnel["per_user_counts"][0];
        var colors = ["#16a085", "#d35400", "#2980b9", "#f39c12", "#8e44ad"];

        var svg = "";
        var previousNum;
        funnel["event_names"].forEach(function (eventName, i) {
            var currentNum = funnel["per_user_counts"][i];
            if (i != 0) {
                svg += arrowSvg(previousNum, currentNum, funnel["timings"][i],
								funnel["repeats"][i], funnel["cardinalities"][i],
								graphSize);
            }
            color = colors[i % 5];
            svg += nodeSvg(eventName, currentNum, maxNum, color, graphSize);
            previousNum = currentNum;
        });
        return svg;
    }

    $('document').ready(function(){
		$('#project').change(function(e){
			globalCurrentProjectId = $('#project').val()
			if (!globalCurrentProjectId) {
				return;
			}
			var events = globalProjectEvents[globalCurrentProjectId]["events"];
        	var eventRowDiv = initRows(events);
        	var eventRow = $(eventRowDiv);
			$('#rules-input').empty();
			$('#rules-input').append(eventRow);
        	eventRow.find('#start-options').select2({dropdownAutoWidth: 'true'});
        	eventRow.find('#end-options').select2({dropdownAutoWidth: 'true'});
		})
		$('#project').trigger("change");
    })
    </script>
{{end}}
